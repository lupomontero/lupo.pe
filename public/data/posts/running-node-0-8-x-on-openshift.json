{
  "id": "running-node-0-8-x-on-openshift",
  "title": "Running nodejs 0.8.x (or any other version) on OpenShift",
  "url": "https://lupomontero.com/running-node-0-8-x-on-openshift/",
  "tags": [
    "javascript",
    "node",
    "openshift"
  ],
  "author": "lupo",
  "publishedAt": "2012-09-28T00:00:00.000Z",
  "body": "<p>This week I had a quick look at Red Hat’s <a href=\"https://openshift.redhat.com/\">OpenShift</a>\nplatform. After a very good first impression I decided to create a sort of\n“hello world” node app to see the gears in motion. So I look around...\ncartdriges... and voila! There it is, nodejs... but its 0.6... hmmm... scroll\ndown a bit more... DIY [experimental]... aha!</p>\n<p>Next thought: Why don’t I use the DIY thing to try and install node 0.8.x, or\neven better, something that allows me to chose which nodejs version I want to\nrun.</p>\n<p>To my surprise, two coffees later there it was, working fine and doing what I\nwas expecting it to do. Even if this is a half-baked solution (to say the\nleast), it may still help someone out there trying to run nodejs v0.8.x on\nOpenShift. So why not share it. Before I wrote up this\n<a href=\"https://openshift.redhat.com/community/content/node-08\">post I found a post on the OpenShift community explaining how to run 0.8 on OpenShift</a>,\nbut I thought this could be simplified a bit using nave, a script by Isaac Z.\nSchlueter based on Tim Caswell’s “nvm” and Kris Kowal’s “sea” programs.</p>\n<p>To start with I created a new app using the DIY cartridge and cloned the git\nrepo on my computer. Looking at the files included by default in the repo there\nwas a directory named <code>.openshift</code> which contained <code>action_hooks</code> and <code>cron</code>. In\nthis article I won’t go into the cron stuff, thats a completely different topic.\nBut the <code>action_hooks</code> look like they would give us the tools we need, together\nwith the incredibly helpful <a href=\"https://github.com/isaacs/nave\">nave</a>.</p>\n<p>After messing about for a bit my file structure looked a bit like this:</p>\n<pre><code>.\n??? .gitignore\n??? .openshift\n??? ??? action_hooks\n??? ??? ??? build\n??? ??? ??? deploy\n??? ??? ??? post_deploy\n??? ??? ??? pre_build\n??? ??? ??? start\n??? ??? ??? stop\n??? ??? cron (omitting dir contents)\n??? README\n??? app.js\n??? package.json\n??? public\n??? ??? favicon.ico\n??? ??? style.css\n??? views\n    ??? index.hbs\n    ??? layout.hbs\n</code></pre>\n<p>I added a <code>package.json</code> file with the normal stuff including dependencies. Im\nusing <a href=\"http://handlebarsjs.com/\">handlebars</a> to render views and serving static content from <code>public/</code>. I also\nadded <code>app.js</code> which contains the application code. Now we need to make sure the\nhooks get to install and choose the right version of nodejs and then start the\nserver using this version of nodejs. To do this we concentrate on 4 files:</p>\n<ul>\n<li><code>.openshift/action_hooks/pre_build</code></li>\n<li><code>.openshift/action_hooks/start</code></li>\n<li><code>.openshift/action_hooks/stop</code></li>\n<li><code>app.js</code></li>\n</ul>\n<p>The gists below should speak for themselves.</p>\n<p><code>.openshift/action_hooks/pre_build</code></p>\n<pre><code class=\"language-sh\">#!/bin/bash\n# This is a simple script and will be executed on your CI system if\n# available.  Otherwise it will execute while your application is stopped\n# before the build step.  This script gets executed directly, so it\n# could be python, php, ruby, etc.\n\nNAVE=$OPENSHIFT_DATA_DIR/nave/nave.sh\n\n# If `nave` doesn't exist we get it from GitHub.\nif [ ! -f $NAVE ]; then\n  echo 'Downloading isaacs/nave from GitHub...'\n  git clone git://github.com/isaacs/nave.git $OPENSHIFT_DATA_DIR/nave\nfi\n\n# We go into the repo where the app lives so we can run `npm install` in there.\ncd $OPENSHIFT_REPO_DIR\n\n# Use `nave` to make sure we use the right `node` and `npm` versions.\n# We set the `$HOME` environment variable to data dir as this is the only place\n# where we can write and `npm` will need to do so in home.\nHOME=$OPENSHIFT_DATA_DIR $NAVE use 0.10.33 npm install --production\n</code></pre>\n<p><code>.openshift/action_hooks/start</code></p>\n<pre><code class=\"language-sh\">#!/bin/bash\n# The logic to start up your application should be put in this\n# script. The application will work only if it binds to\n# $OPENSHIFT_INTERNAL_IP:8080\n\nHOME=$OPENSHIFT_DATA_DIR nohup $OPENSHIFT_DATA_DIR/nave/nave.sh use 0.10.33 \\\n  $OPENSHIFT_REPO_DIR'app.js' $OPENSHIFT_INTERNAL_PORT $OPENSHIFT_INTERNAL_IP \\\n  > $OPENSHIFT_LOG_DIR/app.log 2>&#x26;1 &#x26;\n</code></pre>\n<p><code>.openshift/action_hooks/stop</code></p>\n<pre><code class=\"language-sh\">#!/bin/bash\n# The logic to stop your application should be put in this script.\nkill `ps -ef | grep app.js | grep -v grep | awk '{ print $2 }'` > /dev/null 2>&#x26;1\nexit 0\n</code></pre>\n<p><code>app.js</code></p>\n<pre><code class=\"language-js\">#!/usr/bin/env node\n\nvar express = require('express');\nvar port = process.argv[2] || 8080;\nvar ip = process.argv[3] || '127.0.0.1';\nvar app = express();\n\napp.set('views', __dirname + '/views');\napp.set('view engine', 'hbs');\napp.use(express.static(__dirname + '/public'));\n\napp.get('/', function (req, res, next) {\n  res.render('index', { title: 'A test app', node_version: process.version });\n});\n\napp.listen(port, ip, function () {\n  console.log('nodejs ' + process.version + ' server listening on ' + ip + ':' + port);\n});\n</code></pre>\n<p>With all of this in place, when I commit my changes and push them to the server\nthe pre_build script is doing its job and installing all my dependencies. The\napp also starts and stops normally and all of it running nodejs v0.8.10. Nice.</p>\n<p>Bear in mind that this example is very rough and nowhere near perfect, but it\nshows some of the possibilities and how easy it is to put the different parts\ntogether. For the time being the code in this example is running here:\nhttp://test-lupo.rhcloud.com/.</p>"
}