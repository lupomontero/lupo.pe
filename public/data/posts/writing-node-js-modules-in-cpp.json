{
  "id": "writing-node-js-modules-in-cpp",
  "title": "Writing Node.js modules in C++",
  "url": "https://lupomontero.com/writing-node-js-modules-in-cpp/",
  "tags": [
    "c++",
    "javascript",
    "node"
  ],
  "author": "lupo",
  "publishedAt": "2011-03-13T00:00:00.000Z",
  "body": "<p>Today I found myself looking at how to write <a href=\"https://nodejs.org\">Node.js</a>\nmodules in C++. I read <a href=\"https://howtonode.org/how-to-module\">@izs’s article on the How to Node website</a>\nand felt tempted to explore the C++ route, being already familiar with their\nJavaScript counterparts.</p>\n<p>I am no C++ expert, in fact I’m quite a noobie, but I have read a lot of it (it\nis used to ilustrate programming concepts in sooooo many books) and even managed\nto write a couple of command line tools for my own use. Anyway, the idea in this\npost is to show the most basic interaction between a C++ module and node.js. The\nexamples I have seen have been very useful, but I felt the need to simplify the\ncode even more and reduce the “hello world” module into the bare minimum.</p>\n<p>So this is my go at it (this has been updated to work with Node.js v4.0.0):</p>\n<pre><code class=\"language-c++\">#include &#x3C;node.h>\n\nnamespace cpphello {\n\n  using v8::FunctionCallbackInfo;\n  using v8::Isolate;\n  using v8::Local;\n  using v8::Object;\n  using v8::String;\n  using v8::Value;\n\n  void Foo(const FunctionCallbackInfo&#x3C;Value>&#x26; args) {\n    Isolate* isolate = args.GetIsolate();\n    args.GetReturnValue().Set(String::NewFromUtf8(isolate, \"Hello World\"));\n  }\n\n  void Init(Local&#x3C;Object> exports) {\n    NODE_SET_METHOD(exports, \"foo\", Foo);\n  }\n\n  NODE_MODULE(cpphello, Init)\n\n}\n</code></pre>\n<p>This code registers a module called <code>cpphello</code>. This module has one method\ncalled <code>foo</code>, and this method simply returns a string (<code>\"Hello World\"</code>).</p>\n<blockquote>\n<p>UPDATE: This example has been updated thanks to pull requests from <a href=\"https://github.com/lupomontero/node-cpphello/pull/2\">kul</a></p>\n</blockquote>\n<p>So from a Node.js JavaScript file we could use it like this:</p>\n<pre><code class=\"language-js\">var cpphello = require('./cpphello');\n\ncpphello.foo(); // hello world\n</code></pre>\n<p>You can get the whole source code for this hello world module from\n<a href=\"https://github.com/lupomontero/node-cpphello\">GitHub</a>. There you will find the\n<code>.cpp</code> file with the c++ source and a JavaScript file using the module together\nwith the build script.</p>\n<p>Ok, so now that I have a basic hello world module I can’t help but wondering,\nhow much faster will the C++ code run? Well, at this point I just had to, so I\nwrote a really quick and dirty test. The test implements the exact same piece of\ncode both in C++ and JavaScript and then compares execution times. You can\ndownload the test also from GitHub: https://github.com/lupomontero/node-cppspeed.</p>\n<p>The results:</p>\n<pre><code>foo run in 167ms\ncppfoo run in 18ms\nc++ was 9.3 times faster\n</code></pre>\n<p>Other examples:</p>\n<ul>\n<li>https://github.com/pkrumins/node-async</li>\n<li>https://github.com/isaacs/node-async-simple</li>\n</ul>"
}