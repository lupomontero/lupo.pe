{
  "id": "managing-ports-in-freebsd",
  "title": "Managing ports in FreeBSD",
  "tags": [
    "freebsd",
    "unix"
  ],
  "author": "lupo",
  "publishedAt": "2009-08-31T00:00:00.000Z",
  "body": "<p><img src=\"https://user-images.githubusercontent.com/110297/38502017-f4b9aa76-3bd3-11e8-8bf2-3f156b30324f.png\" alt=\"FreeBSD logo\"></p>\n<p>The aim of this article is to summarise the installation, reinstallation and deinstallation of ports (packages) in FreeBSD. The FreeBSD ports collection is\nprobably one of the most compelling reasons to choose FreeBSD (and you will soon\nsee why). This tutorial continues from where we left the minimal installation\nin my previous post, so I am assuming you already have a working FreeBSD box.</p>\n<p>Before we download the ports collection lets install curl, a very useful tool\nthat will help us download the ports archive itself. We do this using the\npkg_add command.</p>\n<pre><code class=\"language-sh\">$ pkg_add -r curl\n</code></pre>\n<p>As simple as that. The previous command should download the packages from the\nremote repo (the -r option stands for “remote”) and install them. If everything\ngoes according to plan you should output that resembles the following:</p>\n<pre><code>Fetching ftp://ftp.freebsd.org/pub/FreeBSD/ports/i386/packages-7.2-release/Latest/curl.tbz... Done.\nFetching ftp://ftp.freebsd.org/pub/FreeBSD/ports/i386/packages-7.2-release/All/ca_root_nss-3.11.9_2.tbz... Done.\n</code></pre>\n<p>After installing a package you will need to run rehash in order to refresh your\nenvironment path if you want to use the command straight away, otherwise it will\nbe available next time you log in.</p>\n<pre><code class=\"language-sh\">$ rehash\n</code></pre>\n<p>Note that the rehash command will not show any output.</p>\n<h2>Download BSD ports</h2>\n<p>To download the ports simply change directory to /usr, and use the curl command\nwith the -O option. After the file has downloaded we proceed to extract it using\ntar.</p>\n<pre><code class=\"language-sh\">$ cd /usr\n$ curl -O ftp://ftp.freebsd.org/pub/FreeBSD/ports/ports/ports.tar.gz\n$ tar -xzvf ports.tar.gz\n$ rm ports.tar.gz\n</code></pre>\n<p>In this example I have removed the archive after extracting it as we wont need\nit again.</p>\n<h2>Installing ports</h2>\n<p>Installing ports normally involves issuing only two commands: changing directory\nto the required port in the collection and issuing the “make install clean”\ncommand. Well, “make install clean” is actually three commands, make will\ncompile the software, install will unsurprisingly install it on the system and\nclean will clean up after the installation.</p>\n<p>For example, lets install “sudo” (a useful tool that allows you to run commands\n“as” root):</p>\n<pre><code class=\"language-sh\">$ cd /usr/ports/security/sudo\n$ make install clean\n</code></pre>\n<p>Some packages will display a menu with build options when installing them. You\ncan navigate this menu using the tab key. To check/uncheck boxes use the space\nbar and when you are done tab your way to the [Ok] button and press enter. The\nsudo package should display the following menu:</p>\n<p><img src=\"https://user-images.githubusercontent.com/110297/38502018-f4d3d2c0-3bd3-11e8-94fe-64479231ed76.png\" alt=\"FreeBSD sudo options\"></p>\n<p>Note: Packages can take quite a while to install depending on the number of\ndependencies needed to build the program.</p>\n<h2>Listing installed ports</h2>\n<p>If you need to check if a port is installed or find out exactly which version is\ninstalled you can use the pkg_info command. This command will list all installed\npackages showing the full package names (including the version number) and a\nshort description. For example:</p>\n<pre><code class=\"language-sh\">$ pkg_info\nca_root_nss-3.11.9_2 The root certificate bundle from the Mozilla Project\ncurl-7.19.4         Non-interactive tool to get files from FTP, GOPHER, HTTP(S)\nsudo-1.6.9.20       Allow others to run commands as root\n</code></pre>\n<h2>Uninstalling ports</h2>\n<p>Ok, now that you know how to install ports you might be wondering how do you get\nrid of a program after installing it? Easy peasy, we ca use the pkg_delete\ncommand. Let’s uninstall sudo (that’s the package we installed a minute ago).\nFirst we need to find out which version was installed (can you believe that I\nalready forgot?). But we now know how to do that:</p>\n<pre><code class=\"language-sh\">$ pkg_info | grep -i sudo\nsudo-1.6.9.20       Allow others to run commands as root\n</code></pre>\n<p>Note that I have “piped” the output into grep. This will filter the output of\nthe pkg_info command and only display lines containing the string “sudo”.</p>\n<pre><code class=\"language-sh\">$ pkg_delete sudo-1.6.9.20\n</code></pre>\n<h2>Reconfiguring ports after installation</h2>\n<p>Sometimes you may find that you want to change the build options you specified\nwhen installing a port, because you forgot to enable a module or maybe an option\nis required by some other program you are trying to install. We can go back to\nthe installation menu using the make config command or we could simply remove\nthe existing build configuration and start the package installation from scratch.</p>\n<p>Lets edit the existing build configuration for curl. I dont remember the path to\nthe port so I will first issue a find command looking for a directory (-type d)\nnamed “curl” within the port collection:</p>\n<pre><code class=\"language-sh\">$ find /usr/ports -type d -name curl\n/usr/ports/ftp/curl\n$ cd /usr/ports/ftp/curl\n$ make config\n</code></pre>\n<p>This will display the menu with the build options used when installing and we\ncan modify them.</p>\n<p>If instead we want to remove the configuration and install the package from\nscratch:</p>\n<pre><code class=\"language-sh\">$ cd /usr/ports/ftp/curl\n$ make rmconfig\n</code></pre>\n<p>After you have either deleted of modified the build options you will need to\nreinstall by issuing:</p>\n<pre><code class=\"language-sh\">$ make deinstall\n$ make reinstall clean\n</code></pre>\n<p>If you just want to see the full build configuration use the make showconfig\ncommand within the relevant port directory. For example:</p>\n<pre><code class=\"language-sh\">$ cd /usr/ports/ftp/curl\n$ make showconfig\n</code></pre>\n<p>For full documentation please visit the official FreeBSD Ports site at:\nhttp://www.freebsd.org/doc/en/books/handbook/ports-using.html</p>"
}