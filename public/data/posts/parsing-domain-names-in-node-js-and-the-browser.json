{
  "id": "parsing-domain-names-in-node-js-and-the-browser",
  "title": "Parsing domain names in node.js and the browser",
  "url": "https://lupomontero.com/parsing-domain-names-in-node-js-and-the-browser/",
  "tags": [
    "javascript",
    "node"
  ],
  "author": "lupo",
  "publishedAt": "2014-11-11T00:00:00.000Z",
  "body": "<p>Parsing domain names in a useful way is a bitch. Top level domains have lots of\nexceptions and weird rules that are imposible to reflect in a sensible regular\nexpression.</p>\n<p>The only reliable way of approaching this is using a regularly updated list of\nall known public suffixes and their basic rules.</p>\n<p>Thankfully, the Mozilla guys maintain the <a href=\"https://publicsuffix.org/\">Public Suffix List</a>\nwhich is exactly such a list.</p>\n<p>Based on this list I have written a JavaScript module that allows you to parse\ndomain names into meaningful parts: <a href=\"https://github.com/wrangr/psl\">psl</a>.</p>\n<p>For most domain names it is pretty straight forward to figure out what the\n\"tld\", \"apex domain\" and \"subdomain\" are. For example, given <code>www.foo.com</code> we\ncan easily tell <code>com</code> is the \"tld\", while the \"apex domain\" is <code>foo.com</code> and\n<code>www</code> is a subdomain.</p>\n<p>Now consider domain names like <code>a.b.c.d.foo.uk.com</code>. If you are familiar with\ndomain name registrations you probably know where this is going. Exceptional\nrules apply for many \"public suffixes\", and in practical terms, <code>uk.com</code> should\nbe considered as the \"tld\" and not <code>com</code>.</p>\n<p><code>psl</code> allows you to easily determine which part of the domain name is the <code>tld</code> or\n<code>public suffix</code>.</p>\n<pre><code class=\"language-js\">var psl = require('psl');\n\nvar parsed = psl.parse('a.b.c.d.foo.uk.com');\n\nconsole.log(parsed.tld); // 'uk.com'\nconsole.log(parsed.sld); // 'foo'\nconsole.log(parsed.domain); // 'foo.uk.com'\nconsole.log(parsed.subdomain); // 'a.b.c.d'\n</code></pre>\n<p>It handles all kinds of special rules like the ones affecting <code>.jp</code>, where the\nregistry reserves domains for each prefecture and government body, but domains\ncan also be registered at the top level domain. Consider <code>a.b.ide.kyoto.jp</code> and\n<code>www.sony.jp</code>.</p>\n<pre><code class=\"language-js\">var psl = require('psl');\n\nvar parsed = psl.parse('a.b.ide.kyoto.jp');\n\nconsole.log(parsed.tld); // 'ide.kyoto.jp'\nconsole.log(parsed.sld); // 'b'\nconsole.log(parsed.domain); // 'b.ide.kyoto.jp'\nconsole.log(parsed.subdomain); // 'a'\n\nvar parsed2 = psl.parse('www.sony.jp');\n\nconsole.log(parsed2.tld); // 'jp'\nconsole.log(parsed2.sld); // 'sony'\nconsole.log(parsed2.domain); // 'sony.jp'\nconsole.log(parsed2.subdomain); // 'www'\n</code></pre>\n<p>Finally, another very important thing to bear in mind is\n<a href=\"http://en.wikipedia.org/wiki/Internationalized_domain_name\">internationalised domain names</a>.\n<code>psl</code> handles both punnycode ascii domains as well as unicode.</p>\n<pre><code class=\"language-js\">var psl = require('psl');\n\nvar parsed = psl.parse('www.é£Ÿç‹®.ä¸­å›½');\n\nconsole.log(parsed.tld); // 'ä¸­å›½'\nconsole.log(parsed.sld); // 'é£Ÿç‹®'\nconsole.log(parsed.domain); // 'é£Ÿç‹®.ä¸­å›½'\nconsole.log(parsed.subdomain); // 'www'\n\nvar parsed2 = psl.parse('shishi.ä¸­å›½');\n\nconsole.log(parsed2.tld); // 'ä¸­å›½'\nconsole.log(parsed2.sld); // 'shishi'\nconsole.log(parsed2.domain); // 'shishi.ä¸­å›½'\nconsole.log(parsed2.subdomain); // null\n\nvar parsed3 = psl.parse('shishi.xn--fiqs8s');\n\nconsole.log(parsed3.tld); // 'xn--fiqs8s'\nconsole.log(parsed3.sld); // 'shishi'\nconsole.log(parsed3.domain); // 'shishi.xn--fiqs8s'\nconsole.log(parsed3.subdomain); // null\n</code></pre>\n<p>Feedback and pull requests are welcome ðŸ˜‰</p>\n<ul>\n<li><a href=\"https://github.com/wrangr/psl\">Source on GitHub</a></li>\n<li><a href=\"https://www.npmjs.org/package/psl\">Releases via NPM</a></li>\n</ul>"
}