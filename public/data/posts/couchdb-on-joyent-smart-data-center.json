{
  "id": "couchdb-on-joyent-smart-data-center",
  "title": "CouchDB on Joyent Smart Data Center",
  "url": "https://lupomontero.com/couchdb-on-joyent-smart-data-center/",
  "tags": [
    "couchdb",
    "javascript",
    "smartos"
  ],
  "author": "lupo",
  "publishedAt": "2015-05-29T00:00:00.000Z",
  "body": "<p>Over the last few weeks I have been exploring <a href=\"https://www.joyent.com/\">Joyent’s Smart Data Center</a>\nas an alternative to <a href=\"http://aws.amazon.com/\">AWS</a>. I mainly run <a href=\"https://nodejs.org/\">node.js</a>\napps these days, so I feel naturally inclined to try out Joyent’s platform. But\nbefore diving into all the node.js goodness, I wanted to check out their command\nline tool (<a href=\"https://github.com/joyent/node-smartdc\">smartdc</a>) and familiarise\nwith the basics. As it turns out, the other half of most of my apps is quickly\nbecoming <a href=\"http://couchdb.apache.org/\">CouchDB</a>, so it would make sense to see\nhow we could go about quickly spinning up a CouchDB instance.</p>\n<p>I followed these steps:</p>\n<h2>1. Install smartdc and set up environment</h2>\n<p>To get started I installed both <a href=\"https://www.npmjs.com/package/smartdc\"><code>smartdc</code></a>\nand <a href=\"https://www.npmjs.com/package/json\"><code>json</code></a> on my machine as described in\n<a href=\"https://apidocs.joyent.com/cloudapi/\">Joyent’s Cloud API Docs</a>:</p>\n<pre><code class=\"language-sh\">npm install smartdc -g\nnpm install json -g\n</code></pre>\n<p>I also added environment variables (<code>SDC_ACCOUNT</code>, <code>SDC_URL</code> and <code>SDC_KEY_ID</code>)\nto my shell so I wouldn’t need to include in each command. More on this can be\nfound on the official docs.</p>\n<h2>2. Choose an image</h2>\n<p>So, let’s get cracking. Before we create a new instance, we will need to know\nwhat “image” we want to use, and what “package” we want to run. A “package” is\nlike an instance type, it defines the specs of the machine you are starting.\nLet’s use the CLI to list <code>id</code>, <code>name</code> and <code>version</code> of images matching\n“couchdb”:</p>\n<pre><code class=\"language-sh\">sdc-listimages | json -a id name version os | grep couchdb\n</code></pre>\n<p>This will output something like:</p>\n<pre><code>acf16260-48e3-11e4-b6a5-0b29395f1d96 couchdb 14.2.0 smartos\n81ea4dc2-7aff-11e4-866f-273a920433fb couchdb 14.3.0 smartos\n3abc27e6-cd79-11e4-ad17-ab914a388d7c couchdb 14.4.0 smartos\n</code></pre>\n<p>For this example we note down the id of the latest version.</p>\n<h2>3. Choose a package</h2>\n<p>Now we need to choose a package. To list <code>id</code> and <code>name</code> of plans matching\n“standard”:</p>\n<pre><code class=\"language-sh\">sdc-listpackages | json -a id name | grep standard\n</code></pre>\n<p>This will show a long list with all the different “standard” packages. For the\nexample I picked <code>g3-standard-1-smartos</code> (id:\n<code>11a01166-3f15-4857-bfde-b5c326acd85f</code>).</p>\n<h2>4. Create machine</h2>\n<p>We are now ready to spin up a machine using a couchdb image:</p>\n<pre><code class=\"language-sh\">sdc-createmachine --name=couch-1 --image=3abc27e6-cd79-11e4-ad17-ab914a388d7c --package=11a01166-3f15-4857-bfde-b5c326acd85f\n</code></pre>\n<p>This will produce output like:</p>\n<pre><code class=\"language-json\">{\n  \"id\": \"2540fe4f-44a3-c195-bd3e-ac0e15fab0f9\",\n  \"name\": \"couch-1\",\n  \"type\": \"smartmachine\",\n  \"state\": \"provisioning\",\n  \"image\": \"3abc27e6-cd79-11e4-ad17-ab914a388d7c\",\n  \"ips\": [],\n  \"memory\": 1024,\n  \"disk\": 33792,\n  \"metadata\": {\n    \"root_authorized_keys\": \"&#x3C;your-ssh-key>\"\n  },\n  \"tags\": {},\n  \"created\": \"2015-05-29T10:25:17.589Z\",\n  \"updated\": \"2015-05-29T10:25:17.589Z\",\n  \"networks\": [],\n  \"dataset\": \"sdc:sdc:couchdb:14.4.0\",\n  \"firewall_enabled\": false,\n  \"compute_node\": null,\n  \"package\": \"g3-standard-1-smartos\"\n}\n</code></pre>\n<p>At this point you can just sit back and wait for the machine to boot up. You can\ncheck the machine’s details and provisioning status using <code>sdc-getmachine</code>. Once\nthe machine has started, a CouchDB server will be running on port 5984. But it\nwill only be visible on the local network. If you want to expose your CouchDB\ndirectly on the public network you can follow the steps below.</p>\n<h2>5. Expose on public network</h2>\n<h3>Create firewall rule</h3>\n<p>First, we create a firewall rule that will allow traffic into our CouchDB\ninstance:</p>\n<pre><code class=\"language-sh\">$ sdc-createfirewallrule --rule=\"FROM any TO tag role = couchdb ALLOW tcp PORT 5984\" --enabled=true\n</code></pre>\n<pre><code class=\"language-json\">{\n  \"id\": \"cfa7dfe3-cc7b-4655-a1dd-e06144a45349\",\n  \"rule\": \"FROM any TO tag role = couchdb ALLOW tcp PORT 5984\",\n  \"enabled\": true\n}\n</code></pre>\n<p>This basically tells the firewall to “allow all incoming tcp traffic on port\n5984 for machines tagged with role=couchdb”.</p>\n<h3>Tag machine</h3>\n<p>Now that we have a firewall rule for machines tagged with <code>role=couchdb</code>, we\nneed to add the <code>role</code> tag our new machine so that the firewall rule applies to\nit:</p>\n<pre><code class=\"language-sh\">$ sdc-addmachinetags --tag=\"role=couchdb\" 2540fe4f-44a3-c195-bd3e-ac0e15fab0f9\n</code></pre>\n<pre><code class=\"language-json\">{\n  \"role\": \"couchdb\"\n}\n</code></pre>\n<h3>Enable firewall</h3>\n<p>By default, the Cloud Firewall is not enabled, so we enable it for our new\nmachine:</p>\n<pre><code class=\"language-sh\">$ sdc-enablemachinefirewall 2540fe4f-44a3-c195-bd3e-ac0e15fab0f9\n{}\n</code></pre>\n<h3>Change CouchDB’s configuration to bind on public ip</h3>\n<p>Now port 5984 will be reachable on your new machine, but CouchDB by default will\nbind to 127.0.0.1, so it will not be reachable. The final step is to tell\nCouchDB to listen on the public network. To do so, log in to your machine via\nSSH and edit /opt/local/etc/couchdb/local.ini. Find a line like\n<code>!bind_address = 127.0.0.1</code> and change it to:</p>\n<pre><code>bind_address = 0.0.0.0\n</code></pre>\n<p>Restart couchdb service:</p>\n<pre><code class=\"language-sh\">svcadm restart svc:/pkgsrc/couchdb:default\n</code></pre>\n<p>Go to <code>http://&#x3C;public-ip-address>:5984</code> and you should see CouchDB’s welcome\nresponse:</p>\n<pre><code class=\"language-json\">{\"couchdb\":\"Welcome\",\"uuid\":\"33efba52cd9e79c83ea3712aef8d4fc1\",\"version\":\"1.6.1\",\"vendor\":{\"version\":\"1.6.1\",\"name\":\"The Apache Software Foundation\"}}\n</code></pre>\n<p>#€ Conclusions</p>\n<p>Joyen’t Smart Data Centre rocks! It is really easy (and quick) to spin up a\nCouchDB instance. It worked like a charm on first attempt!</p>"
}