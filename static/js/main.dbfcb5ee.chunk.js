(this["webpackJsonplupo.pe"]=this["webpackJsonplupo.pe"]||[]).push([[0],{19:function(e){e.exports=JSON.parse('[{"id":"phantomjs-on-smartos","title":"PhantomJS on SmartOS","url":"https://lupomontero.com/phantomjs-on-smartos/","tags":["phantomjs","javascript","smartos"],"author":"lupo","publishedAt":"2015-06-01","body":"<p>So I\u2019ve been playing around with <a href=\\"https://www.joyent.com/\\">Joyent\u2019s Smart Data Center</a>\\nfor a few days and so far it\u2019s been a very positive experience. Today I was\\ndeploying a test app when bang!</p>\\n<pre><code class=\\"language-sh\\">$ phantomjs@1.9.17 install /root/releases/web/node_modules/haribo/node_modules/phantomjs\\n$ node install.js\\n\\nUnexpected platform or architecture: sunos x64</code></pre>\\n<p>Silly me I didn\u2019t remember I was depending on <a href=\\"http://phantomjs.org/\\"><code>phantomjs</code></a>,\\nand it turns out there is no \u201cofficial\u201d binary for <a href=\\"https://smartos.org/\\">SmartOS</a>.\\nThis seems to have been an issue for a while.</p>\\n<p><a href=\\"https://twitter.com/AriyaHidayat/status/324035301750226944\\">https://twitter.com/AriyaHidayat/status/324035301750226944</a></p>\\n<p>The GitHub issue is a long one... but luckily I spotted <a href=\\"https://twitter.com/mamash\\">@mamash</a>\u2018s comments (and\\ncontributions), where he <a href=\\"https://github.com/ariya/phantomjs/issues/10521#issuecomment-70156661\\">shared a link</a>\\nto a <a href=\\"https://us-east.manta.joyent.com/pkgsrc/public/packages/SmartOS/phantomjs/phantomjs-1.9.8-smartos-i386.tgz\\">pre-built binary for SmartOS</a>, oh\\nyeah! This binary is for <code>phantomjs</code> 1.9.8, which is not exactly the latest, but\\nwill suffice for my experiment.</p>\\n<p>So I went ahead, dowloaded, linked the binary and voil?!</p>\\n<pre><code class=\\"language-sh\\">PREFIX=/opt/local\\nSRC=$PREFIX/src/phantomjs\\nDOWNLOAD_FILE=phantomjs-1.9.8-smartos-i386.tgz\\nDOWNLOAD_URL=https://us-east.manta.joyent.com/pkgsrc/public/packages/SmartOS/phantomjs/$DOWNLOAD_FILE\\n\\n# Create directory where we are going to put phantomjs&#39; source files\\nmkdir -p $SRC\\n# Go into dir, download and extract archive\\ncd $SRC\\nwget $DOWNLOAD_URL\\ntar -xzvf $DOWNLOAD_FILE\\n# Link binary\\nln -s $SRC/bin/phantomjs $PREFIX/bin/</code></pre>\\n<p>After following these steps, <code>phantomjs</code> is now on my <code>PATH</code> and seems to work\\nas expected. So far, I have been able to run all of my <code>phantomjs</code> scripts.</p>\\n<p>Now the question becomes: What needs to be resolved in order to build/compile\\nPhantomJS 2.0 on SmartOS/Solaris? Any ideas? I will likely be exploring this in\\nthe near future, but I\u2019m no C++ expert, so pointers would be appreciated \ud83d\ude09</p>\\n"},{"id":"couchdb-on-joyent-smart-data-center","title":"CouchDB on Joyent Smart Data Center","url":"https://lupomontero.com/couchdb-on-joyent-smart-data-center/","tags":["couchdb","javascript","smartos"],"author":"lupo","publishedAt":"2015-05-29","body":"<p>Over the last few weeks I have been exploring <a href=\\"https://www.joyent.com/\\">Joyent\u2019s Smart Data Center</a>\\nas an alternative to <a href=\\"http://aws.amazon.com/\\">AWS</a>. I mainly run <a href=\\"https://nodejs.org/\\">node.js</a>\\napps these days, so I feel naturally inclined to try out Joyent\u2019s platform. But\\nbefore diving into all the node.js goodness, I wanted to check out their command\\nline tool (<a href=\\"https://github.com/joyent/node-smartdc\\">smartdc</a>) and familiarise\\nwith the basics. As it turns out, the other half of most of my apps is quickly\\nbecoming <a href=\\"http://couchdb.apache.org/\\">CouchDB</a>, so it would make sense to see\\nhow we could go about quickly spinning up a CouchDB instance.</p>\\n<p>I followed these steps:</p>\\n<h2 id=\\"1-install-smartdc-and-set-up-environment\\">1. Install smartdc and set up environment</h2>\\n<p>To get started I installed both <a href=\\"https://www.npmjs.com/package/smartdc\\"><code>smartdc</code></a>\\nand <a href=\\"https://www.npmjs.com/package/json\\"><code>json</code></a> on my machine as described in\\n<a href=\\"https://apidocs.joyent.com/cloudapi/\\">Joyent\u2019s Cloud API Docs</a>:</p>\\n<pre><code class=\\"language-sh\\">npm install smartdc -g\\nnpm install json -g</code></pre>\\n<p>I also added environment variables (<code>SDC_ACCOUNT</code>, <code>SDC_URL</code> and <code>SDC_KEY_ID</code>)\\nto my shell so I wouldn\u2019t need to include in each command. More on this can be\\nfound on the official docs.</p>\\n<h2 id=\\"2-choose-an-image\\">2. Choose an image</h2>\\n<p>So, let\u2019s get cracking. Before we create a new instance, we will need to know\\nwhat \u201cimage\u201d we want to use, and what \u201cpackage\u201d we want to run. A \u201cpackage\u201d is\\nlike an instance type, it defines the specs of the machine you are starting.\\nLet\u2019s use the CLI to list <code>id</code>, <code>name</code> and <code>version</code> of images matching\\n\u201ccouchdb\u201d:</p>\\n<pre><code class=\\"language-sh\\">sdc-listimages | json -a id name version os | grep couchdb</code></pre>\\n<p>This will output something like:</p>\\n<pre><code>acf16260-48e3-11e4-b6a5-0b29395f1d96 couchdb 14.2.0 smartos\\n81ea4dc2-7aff-11e4-866f-273a920433fb couchdb 14.3.0 smartos\\n3abc27e6-cd79-11e4-ad17-ab914a388d7c couchdb 14.4.0 smartos</code></pre><p>For this example we note down the id of the latest version.</p>\\n<h2 id=\\"3-choose-a-package\\">3. Choose a package</h2>\\n<p>Now we need to choose a package. To list <code>id</code> and <code>name</code> of plans matching\\n\u201cstandard\u201d:</p>\\n<pre><code class=\\"language-sh\\">sdc-listpackages | json -a id name | grep standard</code></pre>\\n<p>This will show a long list with all the different \u201cstandard\u201d packages. For the\\nexample I picked <code>g3-standard-1-smartos</code> (id:\\n<code>11a01166-3f15-4857-bfde-b5c326acd85f</code>).</p>\\n<h2 id=\\"4-create-machine\\">4. Create machine</h2>\\n<p>We are now ready to spin up a machine using a couchdb image:</p>\\n<pre><code class=\\"language-sh\\">sdc-createmachine --name=couch-1 --image=3abc27e6-cd79-11e4-ad17-ab914a388d7c --package=11a01166-3f15-4857-bfde-b5c326acd85f</code></pre>\\n<p>This will produce output like:</p>\\n<pre><code class=\\"language-json\\">{\\n  &quot;id&quot;: &quot;2540fe4f-44a3-c195-bd3e-ac0e15fab0f9&quot;,\\n  &quot;name&quot;: &quot;couch-1&quot;,\\n  &quot;type&quot;: &quot;smartmachine&quot;,\\n  &quot;state&quot;: &quot;provisioning&quot;,\\n  &quot;image&quot;: &quot;3abc27e6-cd79-11e4-ad17-ab914a388d7c&quot;,\\n  &quot;ips&quot;: [],\\n  &quot;memory&quot;: 1024,\\n  &quot;disk&quot;: 33792,\\n  &quot;metadata&quot;: {\\n    &quot;root_authorized_keys&quot;: &quot;&lt;your-ssh-key&gt;&quot;\\n  },\\n  &quot;tags&quot;: {},\\n  &quot;created&quot;: &quot;2015-05-29T10:25:17.589Z&quot;,\\n  &quot;updated&quot;: &quot;2015-05-29T10:25:17.589Z&quot;,\\n  &quot;networks&quot;: [],\\n  &quot;dataset&quot;: &quot;sdc:sdc:couchdb:14.4.0&quot;,\\n  &quot;firewall_enabled&quot;: false,\\n  &quot;compute_node&quot;: null,\\n  &quot;package&quot;: &quot;g3-standard-1-smartos&quot;\\n}</code></pre>\\n<p>At this point you can just sit back and wait for the machine to boot up. You can\\ncheck the machine\u2019s details and provisioning status using <code>sdc-getmachine</code>. Once\\nthe machine has started, a CouchDB server will be running on port 5984. But it\\nwill only be visible on the local network. If you want to expose your CouchDB\\ndirectly on the public network you can follow the steps below.</p>\\n<h2 id=\\"5-expose-on-public-network\\">5. Expose on public network</h2>\\n<h3 id=\\"create-firewall-rule\\">Create firewall rule</h3>\\n<p>First, we create a firewall rule that will allow traffic into our CouchDB\\ninstance:</p>\\n<pre><code class=\\"language-sh\\">$ sdc-createfirewallrule --rule=&quot;FROM any TO tag role = couchdb ALLOW tcp PORT 5984&quot; --enabled=true</code></pre>\\n<pre><code class=\\"language-json\\">{\\n  &quot;id&quot;: &quot;cfa7dfe3-cc7b-4655-a1dd-e06144a45349&quot;,\\n  &quot;rule&quot;: &quot;FROM any TO tag role = couchdb ALLOW tcp PORT 5984&quot;,\\n  &quot;enabled&quot;: true\\n}</code></pre>\\n<p>This basically tells the firewall to \u201callow all incoming tcp traffic on port\\n5984 for machines tagged with role=couchdb\u201d.</p>\\n<h3 id=\\"tag-machine\\">Tag machine</h3>\\n<p>Now that we have a firewall rule for machines tagged with <code>role=couchdb</code>, we\\nneed to add the <code>role</code> tag our new machine so that the firewall rule applies to\\nit:</p>\\n<pre><code class=\\"language-sh\\">$ sdc-addmachinetags --tag=&quot;role=couchdb&quot; 2540fe4f-44a3-c195-bd3e-ac0e15fab0f9</code></pre>\\n<pre><code class=\\"language-json\\">{\\n  &quot;role&quot;: &quot;couchdb&quot;\\n}</code></pre>\\n<h3 id=\\"enable-firewall\\">Enable firewall</h3>\\n<p>By default, the Cloud Firewall is not enabled, so we enable it for our new\\nmachine:</p>\\n<pre><code class=\\"language-sh\\">$ sdc-enablemachinefirewall 2540fe4f-44a3-c195-bd3e-ac0e15fab0f9\\n{}</code></pre>\\n<h3 id=\\"change-couchdbs-configuration-to-bind-on-public-ip\\">Change CouchDB\u2019s configuration to bind on public ip</h3>\\n<p>Now port 5984 will be reachable on your new machine, but CouchDB by default will\\nbind to 127.0.0.1, so it will not be reachable. The final step is to tell\\nCouchDB to listen on the public network. To do so, log in to your machine via\\nSSH and edit /opt/local/etc/couchdb/local.ini. Find a line like\\n<code>!bind_address = 127.0.0.1</code> and change it to:</p>\\n<pre><code>bind_address = 0.0.0.0</code></pre><p>Restart couchdb service:</p>\\n<pre><code class=\\"language-sh\\">svcadm restart svc:/pkgsrc/couchdb:default</code></pre>\\n<p>Go to <code>http://&lt;public-ip-address&gt;:5984</code> and you should see CouchDB\u2019s welcome\\nresponse:</p>\\n<pre><code class=\\"language-json\\">{&quot;couchdb&quot;:&quot;Welcome&quot;,&quot;uuid&quot;:&quot;33efba52cd9e79c83ea3712aef8d4fc1&quot;,&quot;version&quot;:&quot;1.6.1&quot;,&quot;vendor&quot;:{&quot;version&quot;:&quot;1.6.1&quot;,&quot;name&quot;:&quot;The Apache Software Foundation&quot;}}</code></pre>\\n<p>#\u20ac Conclusions</p>\\n<p>Joyen\u2019t Smart Data Centre rocks! It is really easy (and quick) to spin up a\\nCouchDB instance. It worked like a charm on first attempt!</p>\\n"},{"id":"parsing-domain-names-in-node-js-and-the-browser","title":"Parsing domain names in node.js and the browser","url":"https://lupomontero.com/parsing-domain-names-in-node-js-and-the-browser/","tags":["javascript","node"],"author":"lupo","publishedAt":"2014-11-11","body":"<p>Parsing domain names in a useful way is a bitch. Top level domains have lots of\\nexceptions and weird rules that are imposible to reflect in a sensible regular\\nexpression.</p>\\n<p>The only reliable way of approaching this is using a regularly updated list of\\nall known public suffixes and their basic rules.</p>\\n<p>Thankfully, the Mozilla guys maintain the <a href=\\"https://publicsuffix.org/\\">Public Suffix List</a>\\nwhich is exactly such a list.</p>\\n<p>Based on this list I have written a JavaScript module that allows you to parse\\ndomain names into meaningful parts: <a href=\\"https://github.com/wrangr/psl\\">psl</a>.</p>\\n<p>For most domain names it is pretty straight forward to figure out what the\\n&quot;tld&quot;, &quot;apex domain&quot; and &quot;subdomain&quot; are. For example, given <code>www.foo.com</code> we\\ncan easily tell <code>com</code> is the &quot;tld&quot;, while the &quot;apex domain&quot; is <code>foo.com</code> and\\n<code>www</code> is a subdomain.</p>\\n<p>Now consider domain names like <code>a.b.c.d.foo.uk.com</code>. If you are familiar with\\ndomain name registrations you probably know where this is going. Exceptional\\nrules apply for many &quot;public suffixes&quot;, and in practical terms, <code>uk.com</code> should\\nbe considered as the &quot;tld&quot; and not <code>com</code>.</p>\\n<p><code>psl</code> allows you to easily determine which part of the domain name is the <code>tld</code> or\\n<code>public suffix</code>.</p>\\n<pre><code class=\\"language-js\\">var psl = require(&#39;psl&#39;);\\n\\nvar parsed = psl.parse(&#39;a.b.c.d.foo.uk.com&#39;);\\n\\nconsole.log(parsed.tld); // &#39;uk.com&#39;\\nconsole.log(parsed.sld); // &#39;foo&#39;\\nconsole.log(parsed.domain); // &#39;foo.uk.com&#39;\\nconsole.log(parsed.subdomain); // &#39;a.b.c.d&#39;</code></pre>\\n<p>It handles all kinds of special rules like the ones affecting <code>.jp</code>, where the\\nregistry reserves domains for each prefecture and government body, but domains\\ncan also be registered at the top level domain. Consider <code>a.b.ide.kyoto.jp</code> and\\n<code>www.sony.jp</code>.</p>\\n<pre><code class=\\"language-js\\">var psl = require(&#39;psl&#39;);\\n\\nvar parsed = psl.parse(&#39;a.b.ide.kyoto.jp&#39;);\\n\\nconsole.log(parsed.tld); // &#39;ide.kyoto.jp&#39;\\nconsole.log(parsed.sld); // &#39;b&#39;\\nconsole.log(parsed.domain); // &#39;b.ide.kyoto.jp&#39;\\nconsole.log(parsed.subdomain); // &#39;a&#39;\\n\\nvar parsed2 = psl.parse(&#39;www.sony.jp&#39;);\\n\\nconsole.log(parsed2.tld); // &#39;jp&#39;\\nconsole.log(parsed2.sld); // &#39;sony&#39;\\nconsole.log(parsed2.domain); // &#39;sony.jp&#39;\\nconsole.log(parsed2.subdomain); // &#39;www&#39;</code></pre>\\n<p>Finally, another very important thing to bear in mind is\\n<a href=\\"http://en.wikipedia.org/wiki/Internationalized_domain_name\\">internationalised domain names</a>.\\n<code>psl</code> handles both punnycode ascii domains as well as unicode.</p>\\n<pre><code class=\\"language-js\\">var psl = require(&#39;psl&#39;);\\n\\nvar parsed = psl.parse(&#39;www.\u98df\u72ee.\u4e2d\u56fd&#39;);\\n\\nconsole.log(parsed.tld); // &#39;\u4e2d\u56fd&#39;\\nconsole.log(parsed.sld); // &#39;\u98df\u72ee&#39;\\nconsole.log(parsed.domain); // &#39;\u98df\u72ee.\u4e2d\u56fd&#39;\\nconsole.log(parsed.subdomain); // &#39;www&#39;\\n\\nvar parsed2 = psl.parse(&#39;shishi.\u4e2d\u56fd&#39;);\\n\\nconsole.log(parsed2.tld); // &#39;\u4e2d\u56fd&#39;\\nconsole.log(parsed2.sld); // &#39;shishi&#39;\\nconsole.log(parsed2.domain); // &#39;shishi.\u4e2d\u56fd&#39;\\nconsole.log(parsed2.subdomain); // null\\n\\nvar parsed3 = psl.parse(&#39;shishi.xn--fiqs8s&#39;);\\n\\nconsole.log(parsed3.tld); // &#39;xn--fiqs8s&#39;\\nconsole.log(parsed3.sld); // &#39;shishi&#39;\\nconsole.log(parsed3.domain); // &#39;shishi.xn--fiqs8s&#39;\\nconsole.log(parsed3.subdomain); // null</code></pre>\\n<p>Feedback and pull requests are welcome \ud83d\ude09</p>\\n<ul>\\n<li><a href=\\"https://github.com/wrangr/psl\\">Source on GitHub</a></li>\\n<li><a href=\\"https://www.npmjs.org/package/psl\\">Releases via NPM</a></li>\\n</ul>\\n"},{"id":"running-node-0-8-x-on-openshift","title":"Running nodejs 0.8.x (or any other version) on OpenShift","url":"https://lupomontero.com/running-node-0-8-x-on-openshift/","tags":["javascript","node","openshift"],"author":"lupo","publishedAt":"2012-09-28","body":"<p>This week I had a quick look at Red Hat\u2019s <a href=\\"https://openshift.redhat.com/\\">OpenShift</a>\\nplatform. After a very good first impression I decided to create a sort of\\n\u201chello world\u201d node app to see the gears in motion. So I look around...\\ncartdriges... and voila! There it is, nodejs... but its 0.6... hmmm... scroll\\ndown a bit more... DIY [experimental]... aha!</p>\\n<p>Next thought: Why don\u2019t I use the DIY thing to try and install node 0.8.x, or\\neven better, something that allows me to chose which nodejs version I want to\\nrun.</p>\\n<p>To my surprise, two coffees later there it was, working fine and doing what I\\nwas expecting it to do. Even if this is a half-baked solution (to say the\\nleast), it may still help someone out there trying to run nodejs v0.8.x on\\nOpenShift. So why not share it. Before I wrote up this\\n<a href=\\"https://openshift.redhat.com/community/content/node-08\\">post I found a post on the OpenShift community explaining how to run 0.8 on OpenShift</a>,\\nbut I thought this could be simplified a bit using nave, a script by Isaac Z.\\nSchlueter based on Tim Caswell\u2019s \u201cnvm\u201d and Kris Kowal\u2019s \u201csea\u201d programs.</p>\\n<p>To start with I created a new app using the DIY cartridge and cloned the git\\nrepo on my computer. Looking at the files included by default in the repo there\\nwas a directory named <code>.openshift</code> which contained <code>action_hooks</code> and <code>cron</code>. In\\nthis article I won\u2019t go into the cron stuff, thats a completely different topic.\\nBut the <code>action_hooks</code> look like they would give us the tools we need, together\\nwith the incredibly helpful <a href=\\"https://github.com/isaacs/nave\\">nave</a>.</p>\\n<p>After messing about for a bit my file structure looked a bit like this:</p>\\n<pre><code>.\\n??? .gitignore\\n??? .openshift\\n??? ??? action_hooks\\n??? ??? ??? build\\n??? ??? ??? deploy\\n??? ??? ??? post_deploy\\n??? ??? ??? pre_build\\n??? ??? ??? start\\n??? ??? ??? stop\\n??? ??? cron (omitting dir contents)\\n??? README\\n??? app.js\\n??? package.json\\n??? public\\n??? ??? favicon.ico\\n??? ??? style.css\\n??? views\\n    ??? index.hbs\\n    ??? layout.hbs</code></pre><p>I added a <code>package.json</code> file with the normal stuff including dependencies. Im\\nusing <a href=\\"http://handlebarsjs.com/\\">handlebars</a> to render views and serving static content from <code>public/</code>. I also\\nadded <code>app.js</code> which contains the application code. Now we need to make sure the\\nhooks get to install and choose the right version of nodejs and then start the\\nserver using this version of nodejs. To do this we concentrate on 4 files:</p>\\n<ul>\\n<li><code>.openshift/action_hooks/pre_build</code></li>\\n<li><code>.openshift/action_hooks/start</code></li>\\n<li><code>.openshift/action_hooks/stop</code></li>\\n<li><code>app.js</code></li>\\n</ul>\\n<p>The gists below should speak for themselves.</p>\\n<p><code>.openshift/action_hooks/pre_build</code></p>\\n<pre><code class=\\"language-sh\\">#!/bin/bash\\n# This is a simple script and will be executed on your CI system if\\n# available.  Otherwise it will execute while your application is stopped\\n# before the build step.  This script gets executed directly, so it\\n# could be python, php, ruby, etc.\\n\\nNAVE=$OPENSHIFT_DATA_DIR/nave/nave.sh\\n\\n# If `nave` doesn&#39;t exist we get it from GitHub.\\nif [ ! -f $NAVE ]; then\\n  echo &#39;Downloading isaacs/nave from GitHub...&#39;\\n  git clone git://github.com/isaacs/nave.git $OPENSHIFT_DATA_DIR/nave\\nfi\\n\\n# We go into the repo where the app lives so we can run `npm install` in there.\\ncd $OPENSHIFT_REPO_DIR\\n\\n# Use `nave` to make sure we use the right `node` and `npm` versions.\\n# We set the `$HOME` environment variable to data dir as this is the only place\\n# where we can write and `npm` will need to do so in home.\\nHOME=$OPENSHIFT_DATA_DIR $NAVE use 0.10.33 npm install --production</code></pre>\\n<p><code>.openshift/action_hooks/start</code></p>\\n<pre><code class=\\"language-sh\\">#!/bin/bash\\n# The logic to start up your application should be put in this\\n# script. The application will work only if it binds to\\n# $OPENSHIFT_INTERNAL_IP:8080\\n\\nHOME=$OPENSHIFT_DATA_DIR nohup $OPENSHIFT_DATA_DIR/nave/nave.sh use 0.10.33 \\\\\\n  $OPENSHIFT_REPO_DIR&#39;app.js&#39; $OPENSHIFT_INTERNAL_PORT $OPENSHIFT_INTERNAL_IP \\\\\\n  &gt; $OPENSHIFT_LOG_DIR/app.log 2&gt;&amp;1 &amp;</code></pre>\\n<p><code>.openshift/action_hooks/stop</code></p>\\n<pre><code class=\\"language-sh\\">#!/bin/bash\\n# The logic to stop your application should be put in this script.\\nkill `ps -ef | grep app.js | grep -v grep | awk &#39;{ print $2 }&#39;` &gt; /dev/null 2&gt;&amp;1\\nexit 0</code></pre>\\n<p><code>app.js</code></p>\\n<pre><code class=\\"language-js\\">#!/usr/bin/env node\\n\\nvar express = require(&#39;express&#39;);\\nvar port = process.argv[2] || 8080;\\nvar ip = process.argv[3] || &#39;127.0.0.1&#39;;\\nvar app = express();\\n\\napp.set(&#39;views&#39;, __dirname + &#39;/views&#39;);\\napp.set(&#39;view engine&#39;, &#39;hbs&#39;);\\napp.use(express.static(__dirname + &#39;/public&#39;));\\n\\napp.get(&#39;/&#39;, function (req, res, next) {\\n  res.render(&#39;index&#39;, { title: &#39;A test app&#39;, node_version: process.version });\\n});\\n\\napp.listen(port, ip, function () {\\n  console.log(&#39;nodejs &#39; + process.version + &#39; server listening on &#39; + ip + &#39;:&#39; + port);\\n});</code></pre>\\n<p>With all of this in place, when I commit my changes and push them to the server\\nthe pre_build script is doing its job and installing all my dependencies. The\\napp also starts and stops normally and all of it running nodejs v0.8.10. Nice.</p>\\n<p>Bear in mind that this example is very rough and nowhere near perfect, but it\\nshows some of the possibilities and how easy it is to put the different parts\\ntogether. For the time being the code in this example is running here:\\n<a href=\\"http://test-lupo.rhcloud.com/\\">http://test-lupo.rhcloud.com/</a>.</p>\\n"},{"id":"jquery-plugin-to-fetch-tweets-using-the-twitter-json-api","title":"jQuery plugin to fetch tweets using the Twitter JSON API","url":"https://lupomontero.com/jquery-plugin-to-fetch-tweets-using-the-twitter-json-api/","tags":["javascript","jquery","twitter"],"author":"lupo","publishedAt":"2011-10-10","body":"<p>Over a year ago I posted a script showing how you could\\n<a href=\\"https://lupomontero.com/jquery-plugin-to-fetch-tweets-using-the-twitter-json-api/fetching-tweets-with-jquery-and-the-twitter-json-api/\\">fetch tweets using jQuery and Twitter\u2019s JSON API</a>,\\nand to my surprise it has had a decent amount of traffic. So now that I\u2019ve been\\nlearning more JavaScript and jQuery I decided to re-write the script as a jQuery\\nplugin.</p>\\n<p>The plugin allows for much easier re-use and integration as well as adding some\\nfeatures like optionally showing the users profile data and autorefresh.</p>\\n<p>Once jQuery and the plugin are loaded you can load a user\u2019s tweets as simple as:</p>\\n<pre><code class=\\"language-js\\">$(&#39;#some-element&#39;).fetchTweets({\\n  username: &#39;some-twitter-user&#39;\\n});</code></pre>\\n<p>Hope you enjoy!</p>\\n<ul>\\n<li><a href=\\"http://e-noise.github.com/jQuery.fetchTweets/\\">The demo</a></li>\\n<li><a href=\\"https://github.com/E-NOISE/jQuery.fetchTweets\\">The source code</a></li>\\n</ul>\\n"},{"id":"building-a-towncountry-picker-using-googles-geocoding-api-and-jquery","title":"Building a town/country picker using Google\u2019s Geocoding API and jQuery","url":"https://lupomontero.com/building-a-towncountry-picker-using-googles-geocoding-api-and-jquery/","tags":["geocoding","javascript","jquery"],"author":"lupo","publishedAt":"2011-08-03","body":"<p>I\u2019m currently working on a new \u201csocial\u201d site for a startup and when building\\nsome of the forms, one of the bits of information we need to collect from users\\nis their country and town or city. Nothing really new, but I didn\u2019t want to\\nbuild an enormous dropdown with every country in the world and then leave the\\ncity/town bit as a simple text input. In this case the possibility of building a\\ncity/town dropdown based on the choice of country just seems nonsense.</p>\\n<p>So I then remembered how Facebook does it. They give you a simple input field\\nand as you start typing it will show a list with options of places matching the\\nstring you\u2019ve typed so far. You then select the desired location from the list\\nand voila. Neat.</p>\\n<p>So now I wanted to implement something like this as a <a href=\\"http://jquery.com/\\">jQuery</a>\\nplugin. The first question I needed to ask myself is \u201cwere do I get the data\\nfrom?\u201d. I needed to be able to send off AJAX requests to some resource that\\nsearches for a given term and returns possible \u201cplaces\u201d. This is where\\n<a href=\\"http://code.google.com/apis/maps/documentation/geocoding/\\">Google\u2019s Geocoding API</a>\\ncomes in. The geocoding API supports JSON output, which is very handy, but we\\nstill have the problem of \u201csame domain policy\u201d for XHR requests. To work around\\nthis I suggest using a simple \u201cproxy\u201d type script on the server side to issue\\nthe requests to Google on behalf of the browser. Doing this we query our own\\ndomain for the searches and avoid cross-domain issues. Checkout the\\n<a href=\\"http://demos.e-noise.com/jQuery.locationPicker/\\">demo</a> for a working example\\nand the <a href=\\"https://github.com/lupomontero/jQuery.locationPicker/blob/master/demo/proxy.php\\">\u201cproxy\u201d script used by the demo on GitHub</a>.</p>\\n<p>The plugin is still work in progress but you can check (and fork) the code on\\n<a href=\\"https://github.com/lupomontero/jQuery.locationPicker\\">GitHub</a>. I hope someone\\nwill find it useful when trying to build the same kind of\\nuser experience.</p>\\n<p>Feedback, bug fixes and new features welcome.</p>\\n<ul>\\n<li><a href=\\"https://github.com/lupomontero/jQuery.locationPicker\\">Source</a></li>\\n<li><a href=\\"http://demos.e-noise.com/jQuery.locationPicker/\\">Demo</a></li>\\n</ul>\\n"},{"id":"installing-phps-oauth-pecl-extension-on-mac-os-x-snow-leopard","title":"Installing PHP\u2019s OAuth PECL extension on Mac OS X Snow Leopard","url":"https://lupomontero.com/installing-phps-oauth-pecl-extension-on-mac-os-x-snow-leopard/","tags":["osx","pecl","php"],"author":"lupo","publishedAt":"2011-03-27","body":"<p>I recently reinstalled the operating system on my Macbook and this time around I\\ndecided to use <a href=\\"https://github.com/mxcl/homebrew\\">homebrew</a> to manage packages.\\nSince <code>php</code> comes pre-installed with OS X and homebrew encourages using the\\npre-installed binaries, I have been using the built-in install of <code>php</code>, and so\\nfar so good.</p>\\n<p>But today I tried to install <a href=\\"http://php.net/manual/en/book.oauth.php\\">php\u2019s OAuth extension</a>,\\nwhich comes as a <code>pecl</code> package, and I run into some errors.</p>\\n<p>Before I started I updated the default <code>pecl</code> channel and upgraded <code>pecl</code>\\nextensions already installed:</p>\\n<pre><code class=\\"language-sh\\">$ sudo pecl channel-update pecl.php.net\\n$ sudo pecl upgrade</code></pre>\\n<p>At this point everything looked good, so I went ahead trying to install the\\nOAuth extension but run into the following error:</p>\\n<pre><code class=\\"language-sh\\">$ sudo pecl install oauth\\n\\ndownloading oauth-1.1.0.tgz ...\\nStarting to download oauth-1.1.0.tgz (44,731 bytes)\\n............done: 44,731 bytes\\n6 source files, building\\nrunning: phpize\\nConfiguring for:\\nPHP Api Version:         20090626\\nZend Module Api No:      20090626\\nZend Extension Api No:   220090626\\nbuilding in /var/tmp/pear-build-root/oauth-1.1.0\\nrunning: /private/var/tmp/apache_mod_php/apache_mod_php-53~1/Build/tmp/pear/temp/oauth/configure\\nchecking for grep that handles long lines and -e... /usr/bin/grep\\n\\n...\\n\\nIn file included from /private/var/tmp/apache_mod_php/apache_mod_php-53~1/Build/tmp/pear/temp/oauth/php_oauth.h:47,\\n             from /private/var/tmp/apache_mod_php/apache_mod_php-53~1/Build/tmp/pear/temp/oauth/oauth.c:14:\\n/usr/include/php/ext/pcre/php_pcre.h:37: error: expected \u2018=\u2019, \u2018,\u2019, \u2018;\u2019, \u2018asm\u2019 or \u2018__attribute__\u2019 before \u2018*\u2019 token\\n/usr/include/php/ext/pcre/php_pcre.h:38: error: expected \u2018=\u2019, \u2018,\u2019, \u2018;\u2019, \u2018asm\u2019 or \u2018__attribute__\u2019 before \u2018*\u2019 token\\n/usr/include/php/ext/pcre/php_pcre.h:44: error: expected specifier-qualifier-list before \u2018pcre\u2019\\nmake: *** [oauth.lo] Error 1\\nERROR: &#39;make&#39; failed</code></pre>\\n<p>Hmmm. So something was wrong with the built-in <a href=\\"http://www.pcre.org/\\">PCRE</a>\\npackage. After \u201cgoogling\u201d the problem and reading many contradicting solutions\\nthe only thing that was clear is that I needed a newer version of PCRE. So I\\ninstalled PCRE using homebrew with the following command (this should also work\\nusing any other method \u2013 macports, compile from source, \u2026):</p>\\n<pre><code class=\\"language-sh\\">$ brew install pcre</code></pre>\\n<p>This worked fine. So now I tried to install the OAuth extension once again using\\nthe same comand as before:</p>\\n<pre><code class=\\"language-sh\\">$ sudo pecl install oauth</code></pre>\\n<p>And this time the extension was insatlled ok, yay!!</p>\\n<p>The only thing I needed to do after that was adding the extension in my\\n<code>php.ini</code> fie (by default it is in <code>/etc/php.ini</code>). Before the end of the\\n<code>php.ini</code> file add <code>extension=oauth.so</code>. Finally we can check if the extension\\nis getting loaded:</p>\\n<pre><code class=\\"language-sh\\">$ php -i | grep -i oauth\\n\\nOAuth\\nOAuth support =&gt; enabled\\nsource version =&gt; $Id: oauth.c 308061 2011-02-06 17:15:34Z jawed $</code></pre>\\n<p>Note that you will need to restart the apache web server in order for the\\nextension to be loaded in the web server.</p>\\n"},{"id":"writing-node-js-modules-in-cpp","title":"Writing Node.js modules in C++","url":"https://lupomontero.com/writing-node-js-modules-in-cpp/","tags":["c++","javascript","node"],"author":"lupo","publishedAt":"2011-03-13","body":"<p>Today I found myself looking at how to write <a href=\\"https://nodejs.org\\">Node.js</a>\\nmodules in C++. I read <a href=\\"https://howtonode.org/how-to-module\\">@izs\u2019s article on the How to Node website</a>\\nand felt tempted to explore the C++ route, being already familiar with their\\nJavaScript counterparts.</p>\\n<p>I am no C++ expert, in fact I\u2019m quite a noobie, but I have read a lot of it (it\\nis used to ilustrate programming concepts in sooooo many books) and even managed\\nto write a couple of command line tools for my own use. Anyway, the idea in this\\npost is to show the most basic interaction between a C++ module and node.js. The\\nexamples I have seen have been very useful, but I felt the need to simplify the\\ncode even more and reduce the \u201chello world\u201d module into the bare minimum.</p>\\n<p>So this is my go at it (this has been updated to work with Node.js v4.0.0):</p>\\n<pre><code class=\\"language-c++\\">#include &lt;node.h&gt;\\n\\nnamespace cpphello {\\n\\n  using v8::FunctionCallbackInfo;\\n  using v8::Isolate;\\n  using v8::Local;\\n  using v8::Object;\\n  using v8::String;\\n  using v8::Value;\\n\\n  void Foo(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {\\n    Isolate* isolate = args.GetIsolate();\\n    args.GetReturnValue().Set(String::NewFromUtf8(isolate, &quot;Hello World&quot;));\\n  }\\n\\n  void Init(Local&lt;Object&gt; exports) {\\n    NODE_SET_METHOD(exports, &quot;foo&quot;, Foo);\\n  }\\n\\n  NODE_MODULE(cpphello, Init)\\n\\n}</code></pre>\\n<p>This code registers a module called <code>cpphello</code>. This module has one method\\ncalled <code>foo</code>, and this method simply returns a string (<code>&quot;Hello World&quot;</code>).</p>\\n<blockquote>\\n<p>UPDATE: This example has been updated thanks to pull requests from <a href=\\"https://github.com/lupomontero/node-cpphello/pull/2\\">kul</a></p>\\n</blockquote>\\n<p>So from a Node.js JavaScript file we could use it like this:</p>\\n<pre><code class=\\"language-js\\">var cpphello = require(&#39;./cpphello&#39;);\\n\\ncpphello.foo(); // hello world</code></pre>\\n<p>You can get the whole source code for this hello world module from\\n<a href=\\"https://github.com/lupomontero/node-cpphello\\">GitHub</a>. There you will find the\\n<code>.cpp</code> file with the c++ source and a JavaScript file using the module together\\nwith the build script.</p>\\n<p>Ok, so now that I have a basic hello world module I can\u2019t help but wondering,\\nhow much faster will the C++ code run? Well, at this point I just had to, so I\\nwrote a really quick and dirty test. The test implements the exact same piece of\\ncode both in C++ and JavaScript and then compares execution times. You can\\ndownload the test also from GitHub: <a href=\\"https://github.com/lupomontero/node-cppspeed\\">https://github.com/lupomontero/node-cppspeed</a>.</p>\\n<p>The results:</p>\\n<pre><code>foo run in 167ms\\ncppfoo run in 18ms\\nc++ was 9.3 times faster</code></pre><p>Other examples:</p>\\n<ul>\\n<li><a href=\\"https://github.com/pkrumins/node-async\\">https://github.com/pkrumins/node-async</a></li>\\n<li><a href=\\"https://github.com/isaacs/node-async-simple\\">https://github.com/isaacs/node-async-simple</a></li>\\n</ul>\\n"},{"id":"using-javascript-closures-to-create-private-scopes","title":"Using JavaScript closures to create private scopes","url":"https://lupomontero.com/using-javascript-closures-to-create-private-scopes/","tags":["javascript"],"author":"lupo","publishedAt":"2011-03-06","body":"<p>One of the best known problems in JavaScript is it\u2019s dependance on a global\\nscope, which basically means that any variables you declare outside of a\\nfunction live in the same name space: the ominous <code>window</code> object. Because of\\nthe nature of web pages, many scripts from differnt sources can (and will) run\\non the same page sharing a common global scope and this can be a really really\\nbad thing as it can lead to name collisions (variables with the same names being\\noverwritten) and security issues.</p>\\n<p>To minimise the problem we can use JavaScript\u2019s powerful closures to create\\nprivate scopes where we can be sure our variables are invisible to other scripts\\non the page.</p>\\n<p>So what is a closure? Well, I could have used the definition given by\\n<a href=\\"https://en.wikipedia.org/wiki/Closure_(computer_programming)\\">Wikipedia</a>, but\\nafter reading it myself I think we need a simpler, more practical explanation\\nfor web developers.</p>\\n<p>In JavaScript when you declare a function, the body of the function has access\\nto its parent scope and its own local (private) scope. Closure means that\\nfunctions close over the variables around them, so that functions created inside\\nof another function still have access to the scope in which they were created\\neven after the parent function has returned. Consider this:</p>\\n<pre><code class=\\"language-js\\">var makeFunction = function () {\\n  var foo = true;\\n  return function () {\\n    return foo;\\n  };\\n};\\n\\nvar myFunc = makeFunction();\\nmyFunc(); // true</code></pre>\\n<p>In the code above you can see that <code>makeFunction</code> returns an anonymous function,\\nand this function still has access to <code>foo</code>.</p>\\n<p>Closures together with anonymous functions can be used to achieve effective\\n<em>private</em> scopes. If you have used any AJAX before you will have probably seen\\nanonymous functions. This are functions that don\u2019t have a name and are often\\nused as callbacks passed as arguments when invoking a function that performs an\\nasynchronous task. Something like:</p>\\n<pre><code class=\\"language-js\\">foo(&#39;bar&#39;, function () {\\n  //...\\n});</code></pre>\\n<p>But <em>anonymous</em> functions can also serve a different purpose: creating scope.\\nAll variables declared inside a function are only visible inside that function\\nand hidden from code outside. If we only want to create scope we don\u2019t really\\nneed to give the function a name, we only need to execute the function once so\\nwe can just use the invokation operator on the anonymous function itself.</p>\\n<pre><code class=\\"language-js\\">function () {\\n  //...\\n}();</code></pre>\\n<p>The last <code>()</code> is the invokation operator. This syntax is a bit weird, so to make\\nit easier to read you will normally see it like this:</p>\\n<pre><code class=\\"language-js\\">(function () {\\n  //...\\n}());</code></pre>\\n<p>Wrapping the function in parens makes it easier to see that something funny is\\ngoing on with that function. The function is basically executing itself right\\nafter being declared and since it is anonymous and hasn\u2019t been assigned to any\\nvariable it can not be referenced, effectively creating a private scope.</p>\\n<p>This comes in very handy and is commonly used to wrap whole scripts, putting all\\nyour code in a closure and then publishing a public interface on the <code>window</code>\\nobject.</p>\\n<pre><code class=\\"language-js\\">(function () {\\n  var a = &#39;not foo again&#39;;\\n  var foo = function (b) {\\n    // do something funky with a and b\\n  };\\n  window.myPlugin = foo;\\n}());</code></pre>\\n<p>In the example above variable <code>a</code> is completely private, whereas <code>foo</code> has been\\npublished on the <code>window</code> object under the name <code>myPlugin</code>, so from outside this\\ncode <code>foo</code> can be called using <code>window.myPlugin()</code> or just <code>myPlugin()</code> because\\n<code>window</code> is the global object. This is known as the module pattern and it is\\nvery nicely explained by Ben Cherry in <a href=\\"http://www.adequatelygood.com/JavaScript-Module-Pattern-In-Depth.html\\">this post</a>.</p>\\n<p>This is also very common when writing <a href=\\"http://jquery.com/\\">jQuery</a> plugins. For\\nexample, if we wanted to write a plugin that simply adds a class to the selected\\nnodes (this is a bit silly but should do for the example) we can write something\\nlike this:</p>\\n<pre><code class=\\"language-js\\">(function ($) {\\n  var a = &#39;just-a-classname&#39;;\\n  $.fn.myPlugin = function () {\\n    $(this).addClass(a);\\n  };\\n}(jQuery));</code></pre>\\n<p>Note that we are passing <code>jQuery</code> to the anonymous function as a parameter and\\nthat parameter is given the name of <code>$</code> inside it\u2019s own local scope.</p>\\n<p>So now after you have loaded jQuery and your plugin on the page you can add the\\nclass name <code>just-a-classname</code> to all links by doing this:</p>\\n<pre><code class=\\"language-js\\">jQuery(&#39;a&#39;).myPlugin();</code></pre>\\n<p>I hope that if you read this far you found this post useful. Please leave a\\ncomment and share your thoughts.</p>\\n"},{"id":"php-5-2-10-and-pear-notice-undefined-variable-dorest-in-pearcommandinstall-php-on-line-1220","title":"PHP 5.2.10 and PEAR \u2013 Notice: Undefined variable: dorest in PEAR/Command/Install.php on line 1220","url":"https://lupomontero.com/php-5-2-10-and-pear-notice-undefined-variable-dorest-in-pearcommandinstall-php-on-line-1220/","tags":["pear","php"],"author":"lupo","publishedAt":"2009-12-08","body":"<p>Today, after upgrading packages with apt-get on a server running Debian Lenny my\\nPEAR installation seemed to be broken. PHP had been updated to 5.2.10 and PEAR\\nversion was now 1.8.0. So when I realised that PEAR wasn\u2019t the latest stable I\\ntried upgrading PEAR using the command I\u2019ve always used: pear upgrade pear,\\nwhere the first \u201cpear\u201d is the command we run, then the \u201cupgrade\u201d sub-command and\\nfinally the name of the package we want to work with, unsurprisingly \u201cpear\u201d.</p>\\n<p>So I type the following expecting a happy success message and get this instead:</p>\\n<pre><code class=\\"language-sh\\">$ pear upgrade pear\\nNotice: Undefined variable: dorest in PEAR/Command/Install.php on line 1220\\nNotice: Undefined variable: latest in PEAR/Command/Install.php on line 1228\\nNotice: Undefined variable: latest in PEAR/Command/Install.php on line 1234\\nWarning: array_change_key_case(): The argument should be an array in PEAR/Command/Install.php on line 1234\\nNothing to upgrade</code></pre>\\n<p>After a quick look at the problem I figured out that it was a problem with the\\ncached channel data that PEAR stores under a directory called ./channels in the\\nPEAR installation directory. The problem is quickly solved by deleting the files\\nin that directory. To find out where PEAR is installed you can use the\\n<code>pear list-files</code> command as follows:</p>\\n<pre><code class=\\"language-sh\\">$ pear list-files pear\\nInstalled Files For pear\\n========================\\nType   Install Path\\nphp    /usr/local/zend/share/pear/OS/Guess.php\\nphp    /usr/local/zend/share/pear/PEAR/ChannelFile/Parser.php\\n...</code></pre>\\n<p>In this case my installation directory is /usr/local/zend/share/pear. So now\\nthat we know were the directory is we change directory and delete all files in\\nit.</p>\\n<pre><code class=\\"language-sh\\">$ cd /usr/local/zend/share/pear/.channels/\\n$ rm -rf *</code></pre>\\n<p>After deleting the channels cache you will need to update it by issuing the\\nfollowing command:</p>\\n<pre><code class=\\"language-sh\\">$ pear channel-update pear.php.net\\nUpdating channel &quot;pear.php.net&quot;\\nUpdate of Channel &quot;pear.php.net&quot; succeeded</code></pre>\\n<p>And finally we run the upgrade as originally expected.</p>\\n<pre><code class=\\"language-sh\\">$ pear upgrade pear\\ndownloading PEAR-1.9.0.tgz ...\\nStarting to download PEAR-1.9.0.tgz (291,634 bytes)\\n.................................done: 291,634 bytes\\ndownloading Structures_Graph-1.0.3.tgz ...\\nStarting to download Structures_Graph-1.0.3.tgz (30,191 bytes)\\n...done: 30,191 bytes\\nupgrade ok: channel://pear.php.net/Structures_Graph-1.0.3\\nupgrade ok: channel://pear.php.net/PEAR-1.9.0\\nPEAR: Optional feature webinstaller available (PEAR&#39;s web-based installer)\\nPEAR: Optional feature gtkinstaller available (PEAR&#39;s PHP-GTK-based installer)\\nPEAR: Optional feature gtk2installer available (PEAR&#39;s PHP-GTK2-based installer)\\nPEAR: To install optional features use &quot;pear install pear/PEAR#featurename&quot;</code></pre>\\n<p>To wrap it up lets use the \u201cpear info\u201d command to check that we are now running\\nthe latest version (1.9.0 in this case).</p>\\n<pre><code class=\\"language-sh\\">$ pear info pear\\nAbout pear.php.net/PEAR-1.9.0\\n=============================\\nRelease Type           PEAR-style PHP-based Package\\nName                   PEAR\\nChannel                pear.php.net\\nSummary                PEAR Base System\\nDescription            The PEAR package contains:\\n...</code></pre>\\n"},{"id":"setting-up-a-web-server-with-apache-2-2-x-and-php-5-2-x-with-extensions-pear-mysql-5-x-and-pdo_mysql-on-freebsd-7-step-by-step-tutorial","title":"Setting up a web server with Apache 2.2.x and PHP 5.2.x with extensions, PEAR, MySQL 5.x and pdo_mysql on FreeBSD 7 step by step tutorial","url":"https://lupomontero.com/setting-up-a-web-server-with-apache-2-2-x-and-php-5-2-x-with-extensions-pear-mysql-5-x-and-pdo_mysql-on-freebsd-7-step-by-step-tutorial/","tags":["apache","freebsd","mysql","pear","php"],"author":"lupo","publishedAt":"2009-09-13","body":"<p>This quick tutorial will show you how to set up a FreeBSD machine (based on\\nminimal install) to run as a web server using Apache 2.2.x, PHP 5 and MySQL 5.\\nThis tutorial is based on FreeBSD 7.2 (the current stable release at the time of\\nthis writing).</p>\\n<p>This tutorial builds on the minimal installation described here and assumes you\\nhave also downloaded the ports collection. If you haven\u2019t done so please read\\nthe following article first: Managing ports in FreeBSD.</p>\\n<h2 id=\\"install-mysql-51x-from-bsd-ports\\">Install MySQL 5.1.x from BSD ports</h2>\\n<p>Installing ports will normally involve two commands, changing directory to the\\ncorrect port in the ports collection and then running \u201cmake install clean\u201d. The\\nsecond command is actually composed of three steps (making, installing and\\ncleaning up after the installation).</p>\\n<pre><code class=\\"language-sh\\">$ cd /usr/ports/databases/mysql51-server\\n$ make install clean</code></pre>\\n<p>Now MySQL will be built from source. This process will take a while (actually, a\\nvery long while\u2026).</p>\\n<p>After the installation process finishes we run mysql\u2019s install script:</p>\\n<pre><code class=\\"language-sh\\">$ /usr/local/bin/mysql_install_db</code></pre>\\n<p>For security reasons it is recommended that we change ownership of the mysql\\ndirectory:</p>\\n<pre><code class=\\"language-sh\\">$ chown -R mysql /var/db/mysql/\\n$ chgrp -R mysql /var/db/mysql/</code></pre>\\n<p>Set MySQL root password:</p>\\n<pre><code class=\\"language-sh\\">$ /usr/local/bin/mysqladmin -u root password &#39;Ch4ng3m3&#39;</code></pre>\\n<p>To automatically start MySQL on boot we need to edit the rc.conf file:</p>\\n<pre><code class=\\"language-sh\\">$ ee /etc/rc.conf</code></pre>\\n<p>Then add the following lines near the bottom:</p>\\n<pre><code># Enable Mysql\\nmysql_enable=&quot;YES&quot;</code></pre><h2 id=\\"install-apache-22x-from-bsd-ports\\">Install apache 2.2.x from BSD ports</h2>\\n<pre><code class=\\"language-sh\\">$ cd /usr/ports/www/apache22\\n$ make install clean</code></pre>\\n<p>This will take a while as it will install dependencies like perl, autoconf and\\nmany other packages from source.</p>\\n<p>Start Apache on boot:</p>\\n<pre><code class=\\"language-sh\\">$ ee /etc/rc.conf</code></pre>\\n<p>Then add the following lines near the bottom:</p>\\n<pre><code># Enable Apache 2.2.x\\napache22_enable=&quot;YES&quot;</code></pre><p>To start/stop/restart the apache server:</p>\\n<pre><code class=\\"language-sh\\">$ apachectl start\\n$ apachectl stop\\n$ apachectl restart</code></pre>\\n<p>To \u201cgracefully\u201d restart the web server (without breaking current connections):</p>\\n<pre><code class=\\"language-sh\\">$ apachectl graceful</code></pre>\\n<p>To simply reload configuration:</p>\\n<pre><code class=\\"language-sh\\">$ apachectl reload</code></pre>\\n<h2 id=\\"install-php-52x-from-bsd-ports\\">Install PHP 5.2.x from BSD ports</h2>\\n<pre><code class=\\"language-sh\\">$ cd /usr/ports/lang/php5\\n$ make install clean</code></pre>\\n<p>This will show a configuration screen where you can choose the installation\\noptions. I personally choose everything except the CGI and CGI related options.\\nI much prefer running PHP as an Apache module than CGI.</p>\\n<p>After installing we edit Apache config:</p>\\n<pre><code class=\\"language-sh\\">$ ee /usr/local/etc/apache22/httpd.conf</code></pre>\\n<p>You have to add index.php after index.html to the DirectoryIndex directive, so\\nit should look like this:</p>\\n<pre><code># DirectoryIndex: sets the file that Apache will serve if a directory\\n# is requested.\\n#\\n&lt;IfModule dir_module&gt;\\nDirectoryIndex index.html index.php\\n&lt;/IfModule&gt;</code></pre><p>Add the following lines at the end and save changes:</p>\\n<pre><code>AddType application/x-httpd-php .php\\nAddType application/x-httpd-php-source .phps</code></pre><h2 id=\\"install-php-extensions\\">Install PHP extensions</h2>\\n<pre><code class=\\"language-sh\\">$ cd /usr/ports/lang/php5-extensions\\n$ make install clean</code></pre>\\n<p>This will show a configuration screen where you can choose the installation\\noptions. I personally choose all the defaults plus:</p>\\n<pre><code>bz2\\ncurl\\nftp\\ngd\\nimap\\nmbstring\\nmysql\\nopenssl\\npdf\\nxmlrpc\\nzip\\nzlib</code></pre><p>Restart apache</p>\\n<pre><code class=\\"language-sh\\">$ apachectl restart</code></pre>\\n<h2 id=\\"install-pear\\">Install PEAR</h2>\\n<pre><code class=\\"language-sh\\">$ cd /usr/ports/devel/pear\\n$ make install clean</code></pre>\\n<h2 id=\\"install-pdo_mysql\\">Install pdo_mysql</h2>\\n<pre><code class=\\"language-sh\\">$ cd /usr/ports/databases/php5-pdo_mysql\\n$ make install clean</code></pre>\\n<h2 id=\\"install-phpmyadmin\\">Install phpMyAdmin</h2>\\n<pre><code class=\\"language-sh\\">$ cd /usr/ports/databases/phpmyadmin\\n$ make install clean</code></pre>\\n"},{"id":"fetching-tweets-with-jquery-and-the-twitter-json-api","title":"Fetching tweets with jQuery and the Twitter JSON API","url":"https://lupomontero.com/fetching-tweets-with-jquery-and-the-twitter-json-api/","tags":["ajax","javascript","jquery","twitter"],"author":"lupo","publishedAt":"2009-09-03","body":"<p>Just thought it\u2019d be nice to share this little script that fetches tweets using\\na jQuery AJAX request and the Twitter API. The script is based on a snippet I\\npicked up from my good friend Sven Lito.</p>\\n<p>I\u2019ve added verbose comments in the code itself, so let\u2019s keep this post short \ud83d\ude09</p>\\n<p>This post is pretty old\u2026 I posted a newer version of something like this here.</p>\\n<p>The <a href=\\"https://gist.github.com/lupomontero/2245759\\">javascript</a>:</p>\\n<pre><code class=\\"language-js\\">$(document).ready(function() {\\n  // Declare variables to hold twitter API url and user name\\n  var twitter_api_url = &#39;http://search.twitter.com/search.json&#39;;\\n  var twitter_user    = &#39;lupomontero&#39;;\\n\\n  // Enable caching\\n  $.ajaxSetup({ cache: true });\\n\\n  // Send JSON request\\n  // The returned JSON object will have a property called &quot;results&quot; where we find\\n  // a list of the tweets matching our request query\\n  $.getJSON(\\n    twitter_api_url + &#39;?callback=?&amp;rpp=5&amp;q=from:&#39; + twitter_user,\\n    function(data) {\\n      $.each(data.results, function(i, tweet) {\\n        // Uncomment line below to show tweet data in Fire Bug console\\n        // Very helpful to find out what is available in the tweet objects\\n        //console.log(tweet);\\n\\n        // Before we continue we check that we got data\\n        if(tweet.text !== undefined) {\\n          // Calculate how many hours ago was the tweet posted\\n          var date_tweet = new Date(tweet.created_at);\\n          var date_now   = new Date();\\n          var date_diff  = date_now - date_tweet;\\n          var hours      = Math.round(date_diff/(1000*60*60));\\n\\n          // Build the html string for the current tweet\\n          var tweet_html = &#39;&lt;div class=&quot;tweet_text&quot;&gt;&#39;;\\n          tweet_html    += &#39;&lt;a href=&quot;http://www.twitter.com/&#39;;\\n          tweet_html    += twitter_user + &#39;/status/&#39; + tweet.id + &#39;&quot;&gt;&#39;;\\n          tweet_html    += tweet.text + &#39;&lt;\\\\/a&gt;&lt;\\\\/div&gt;&#39;;\\n          tweet_html    += &#39;&lt;div class=&quot;tweet_hours&quot;&gt;&#39; + hours;\\n          tweet_html    += &#39; hours ago&lt;\\\\/div&gt;&#39;;\\n\\n          // Append html string to tweet_container div\\n          $(&#39;#tweet_container&#39;).append(tweet_html);\\n        }\\n      });\\n    }\\n  );\\n});</code></pre>\\n<p>The <a href=\\"https://gist.github.com/lupomontero/2245762\\">markup</a>:</p>\\n<pre><code class=\\"language-html\\">&lt;div id=&quot;tweet_container&quot;&gt;&lt;/div&gt;</code></pre>\\n"},{"id":"managing-ports-in-freebsd","title":"Managing ports in FreeBSD","url":"https://lupomontero.com/managing-ports-in-freebsd/","tags":["freebsd","unix"],"author":"lupo","publishedAt":"2009-08-31","body":"<p><img src=\\"https://user-images.githubusercontent.com/110297/38502017-f4b9aa76-3bd3-11e8-8bf2-3f156b30324f.png\\" alt=\\"FreeBSD logo\\"></p>\\n<p>The aim of this article is to summarise the installation, reinstallation and deinstallation of ports (packages) in FreeBSD. The FreeBSD ports collection is\\nprobably one of the most compelling reasons to choose FreeBSD (and you will soon\\n    see why). This tutorial continues from where we left the minimal installation\\n    in my previous post, so I am assuming you already have a working FreeBSD box.</p>\\n<p>Before we download the ports collection lets install curl, a very useful tool\\nthat will help us download the ports archive itself. We do this using the\\npkg_add command.</p>\\n<pre><code class=\\"language-sh\\">$ pkg_add -r curl</code></pre>\\n<p>As simple as that. The previous command should download the packages from the\\nremote repo (the -r option stands for \u201cremote\u201d) and install them. If everything\\ngoes according to plan you should output that resembles the following:</p>\\n<pre><code>Fetching ftp://ftp.freebsd.org/pub/FreeBSD/ports/i386/packages-7.2-release/Latest/curl.tbz... Done.\\nFetching ftp://ftp.freebsd.org/pub/FreeBSD/ports/i386/packages-7.2-release/All/ca_root_nss-3.11.9_2.tbz... Done.</code></pre><p>After installing a package you will need to run rehash in order to refresh your\\nenvironment path if you want to use the command straight away, otherwise it will\\nbe available next time you log in.</p>\\n<pre><code class=\\"language-sh\\">$ rehash</code></pre>\\n<p>Note that the rehash command will not show any output.</p>\\n<h2 id=\\"download-bsd-ports\\">Download BSD ports</h2>\\n<p>To download the ports simply change directory to /usr, and use the curl command\\nwith the -O option. After the file has downloaded we proceed to extract it using\\ntar.</p>\\n<pre><code class=\\"language-sh\\">$ cd /usr\\n$ curl -O ftp://ftp.freebsd.org/pub/FreeBSD/ports/ports/ports.tar.gz\\n$ tar -xzvf ports.tar.gz\\n$ rm ports.tar.gz</code></pre>\\n<p>In this example I have removed the archive after extracting it as we wont need\\nit again.</p>\\n<h2 id=\\"installing-ports\\">Installing ports</h2>\\n<p>Installing ports normally involves issuing only two commands: changing directory\\nto the required port in the collection and issuing the \u201cmake install clean\u201d\\ncommand. Well, \u201cmake install clean\u201d is actually three commands, make will\\ncompile the software, install will unsurprisingly install it on the system and\\nclean will clean up after the installation.</p>\\n<p>For example, lets install \u201csudo\u201d (a useful tool that allows you to run commands\\n\u201cas\u201d root):</p>\\n<pre><code class=\\"language-sh\\">$ cd /usr/ports/security/sudo\\n$ make install clean</code></pre>\\n<p>Some packages will display a menu with build options when installing them. You\\ncan navigate this menu using the tab key. To check/uncheck boxes use the space\\nbar and when you are done tab your way to the [Ok] button and press enter. The\\nsudo package should display the following menu:</p>\\n<p><img src=\\"https://user-images.githubusercontent.com/110297/38502018-f4d3d2c0-3bd3-11e8-94fe-64479231ed76.png\\" alt=\\"FreeBSD sudo options\\"></p>\\n<p>Note: Packages can take quite a while to install depending on the number of\\ndependencies needed to build the program.</p>\\n<h2 id=\\"listing-installed-ports\\">Listing installed ports</h2>\\n<p>If you need to check if a port is installed or find out exactly which version is\\ninstalled you can use the pkg_info command. This command will list all installed\\npackages showing the full package names (including the version number) and a\\nshort description. For example:</p>\\n<pre><code class=\\"language-sh\\">$ pkg_info\\nca_root_nss-3.11.9_2 The root certificate bundle from the Mozilla Project\\ncurl-7.19.4         Non-interactive tool to get files from FTP, GOPHER, HTTP(S)\\nsudo-1.6.9.20       Allow others to run commands as root</code></pre>\\n<h2 id=\\"uninstalling-ports\\">Uninstalling ports</h2>\\n<p>Ok, now that you know how to install ports you might be wondering how do you get\\nrid of a program after installing it? Easy peasy, we ca use the pkg_delete\\ncommand. Let\u2019s uninstall sudo (that\u2019s the package we installed a minute ago).\\nFirst we need to find out which version was installed (can you believe that I\\nalready forgot?). But we now know how to do that:</p>\\n<pre><code class=\\"language-sh\\">$ pkg_info | grep -i sudo\\nsudo-1.6.9.20       Allow others to run commands as root</code></pre>\\n<p>Note that I have \u201cpiped\u201d the output into grep. This will filter the output of\\nthe pkg_info command and only display lines containing the string \u201csudo\u201d.</p>\\n<pre><code class=\\"language-sh\\">$ pkg_delete sudo-1.6.9.20</code></pre>\\n<h2 id=\\"reconfiguring-ports-after-installation\\">Reconfiguring ports after installation</h2>\\n<p>Sometimes you may find that you want to change the build options you specified\\nwhen installing a port, because you forgot to enable a module or maybe an option\\nis required by some other program you are trying to install. We can go back to\\nthe installation menu using the make config command or we could simply remove\\nthe existing build configuration and start the package installation from scratch.</p>\\n<p>Lets edit the existing build configuration for curl. I dont remember the path to\\nthe port so I will first issue a find command looking for a directory (-type d)\\nnamed \u201ccurl\u201d within the port collection:</p>\\n<pre><code class=\\"language-sh\\">$ find /usr/ports -type d -name curl\\n/usr/ports/ftp/curl\\n$ cd /usr/ports/ftp/curl\\n$ make config</code></pre>\\n<p>This will display the menu with the build options used when installing and we\\ncan modify them.</p>\\n<p>If instead we want to remove the configuration and install the package from\\nscratch:</p>\\n<pre><code class=\\"language-sh\\">$ cd /usr/ports/ftp/curl\\n$ make rmconfig</code></pre>\\n<p>After you have either deleted of modified the build options you will need to\\nreinstall by issuing:</p>\\n<pre><code class=\\"language-sh\\">$ make deinstall\\n$ make reinstall clean</code></pre>\\n<p>If you just want to see the full build configuration use the make showconfig\\ncommand within the relevant port directory. For example:</p>\\n<pre><code class=\\"language-sh\\">$ cd /usr/ports/ftp/curl\\n$ make showconfig</code></pre>\\n<p>For full documentation please visit the official FreeBSD Ports site at:\\n<a href=\\"http://www.freebsd.org/doc/en/books/handbook/ports-using.html\\">http://www.freebsd.org/doc/en/books/handbook/ports-using.html</a></p>\\n"},{"id":"installing-a-minimal-freebsd-machine","title":"Installing a minimal FreeBSD machine","url":"https://lupomontero.com/installing-a-minimal-freebsd-machine/","tags":["freebsd","unix"],"author":"lupo","publishedAt":"2009-08-30","body":"<p>This tutorial outlines how to install a FreeBSD minimal setup using version 7.2.</p>\\n<p>Instead of trying to put the whole process into writing I thought that a \u201cscreen\\nby screen\u201d approach would be a better idea. I hope the screenshots speak for\\nthemselves. Note that I\u2019ve included every single screen and taken the\\nscreenshots after selecting the options (so you know what I chose).</p>\\n<p>It might look a bit daunting when you see that there are over 40 screenshots,\\nbut bear in mind that most of them are simple yes or no questions or alert\\nmessages. I just thought I would include as much detail as I could since there\\nis nearly no accompanying text.</p>\\n<p><img src=\\"https://user-images.githubusercontent.com/110297/38501618-15ed7782-3bd3-11e8-9d55-41e197803017.png\\" alt=\\"FreeBSD installation screenshot 1\\"></p>\\n<p><img src=\\"https://user-images.githubusercontent.com/110297/38501619-160f5d34-3bd3-11e8-9295-9e464d3d108b.png\\" alt=\\"FreeBSD installation screenshot 2\\"></p>\\n<p><img src=\\"https://user-images.githubusercontent.com/110297/38501620-1630d720-3bd3-11e8-840d-b0bd5e0efc49.png\\" alt=\\"FreeBSD installation screenshot 3\\"></p>\\n<p><img src=\\"https://user-images.githubusercontent.com/110297/38501621-1652bdae-3bd3-11e8-8aad-de6b4ddd7b07.png\\" alt=\\"FreeBSD installation screenshot 4\\"></p>\\n<p><img src=\\"https://user-images.githubusercontent.com/110297/38501624-1672edb8-3bd3-11e8-8003-8fd9f8551efd.png\\" alt=\\"FreeBSD installation screenshot 5\\"></p>\\n<p><img src=\\"https://user-images.githubusercontent.com/110297/38501625-1692e1a4-3bd3-11e8-90e0-0673d7a2555e.png\\" alt=\\"FreeBSD installation screenshot 6\\"></p>\\n<p>At this step simply press \u201cA\u201d to use the entire disk and then \u201cQ\u201d to continue.</p>\\n<p><img src=\\"https://user-images.githubusercontent.com/110297/38501626-16b7faf2-3bd3-11e8-83c0-1f896f57632f.png\\" alt=\\"FreeBSD installation screenshot 7\\"></p>\\n<p><img src=\\"https://user-images.githubusercontent.com/110297/38501627-16debdb8-3bd3-11e8-8730-5ec95f40d005.png\\" alt=\\"FreeBSD installation screenshot 8\\"></p>\\n<p><img src=\\"https://user-images.githubusercontent.com/110297/38501628-17014496-3bd3-11e8-8529-d6fe28ca4218.png\\" alt=\\"FreeBSD installation screenshot 9\\"></p>\\n<p><img src=\\"https://user-images.githubusercontent.com/110297/38501629-17254da0-3bd3-11e8-895d-4c6ebbde9cf2.png\\" alt=\\"FreeBSD installation screenshot 10\\"></p>\\n<p>At this step simply press \u201cA\u201d to use auto defaults and then \u201cQ\u201d to continue.</p>\\n<p><img src=\\"https://user-images.githubusercontent.com/110297/38501630-174e03a8-3bd3-11e8-9c92-e769ce8e0952.png\\" alt=\\"FreeBSD installation screenshot 11\\"></p>\\n<p><img src=\\"https://user-images.githubusercontent.com/110297/38501631-1770e878-3bd3-11e8-8f8e-f684c92f0fb5.png\\" alt=\\"FreeBSD installation screenshot 13\\"></p>\\n<p><img src=\\"https://user-images.githubusercontent.com/110297/38501632-17971458-3bd3-11e8-828d-2ed5625a8737.png\\" alt=\\"FreeBSD installation screenshot 14\\"></p>\\n<p><img src=\\"https://user-images.githubusercontent.com/110297/38501633-17bb6aa6-3bd3-11e8-80bc-d0e3468adcbb.png\\" alt=\\"FreeBSD installation screenshot 15\\"></p>\\n<p><img src=\\"https://user-images.githubusercontent.com/110297/38501634-17dedef0-3bd3-11e8-8d31-f238bb7421fd.png\\" alt=\\"FreeBSD installation screenshot 16\\"></p>\\n<p><img src=\\"https://user-images.githubusercontent.com/110297/38501635-180be12a-3bd3-11e8-93aa-9e41636c34f9.png\\" alt=\\"FreeBSD installation screenshot 17\\"></p>\\n<p><img src=\\"https://user-images.githubusercontent.com/110297/38501636-182ef782-3bd3-11e8-9da0-d62fcbe1d89e.png\\" alt=\\"FreeBSD installation screenshot 18\\"></p>\\n<p><img src=\\"https://user-images.githubusercontent.com/110297/38501637-18517e88-3bd3-11e8-913f-61559d77bfda.png\\" alt=\\"FreeBSD installation screenshot 19\\"></p>\\n<p><img src=\\"https://user-images.githubusercontent.com/110297/38501638-188215ac-3bd3-11e8-9e93-34d8effd3d22.png\\" alt=\\"FreeBSD installation screenshot 20\\"></p>\\n<p><img src=\\"https://user-images.githubusercontent.com/110297/38501639-18a4aa22-3bd3-11e8-8635-8d5ee36a36f2.png\\" alt=\\"FreeBSD installation screenshot 21\\"></p>\\n<p><img src=\\"https://user-images.githubusercontent.com/110297/38501640-18be450e-3bd3-11e8-9c83-d538041af3eb.png\\" alt=\\"FreeBSD installation screenshot 22\\"></p>\\n<p><img src=\\"https://user-images.githubusercontent.com/110297/38501641-18e8f402-3bd3-11e8-97ad-d6a761817d77.png\\" alt=\\"FreeBSD installation screenshot 23\\"></p>\\n<p><img src=\\"https://user-images.githubusercontent.com/110297/38501642-19054512-3bd3-11e8-9a71-026ceff01d0e.png\\" alt=\\"FreeBSD installation screenshot 24\\"></p>\\n<p><img src=\\"https://user-images.githubusercontent.com/110297/38501643-192bd678-3bd3-11e8-8148-f2177c7d8df6.png\\" alt=\\"FreeBSD installation screenshot 25\\"></p>\\n<p><img src=\\"https://user-images.githubusercontent.com/110297/38501644-194f649e-3bd3-11e8-8848-c96a55db13af.png\\" alt=\\"FreeBSD installation screenshot 26\\"></p>\\n<p><img src=\\"https://user-images.githubusercontent.com/110297/38501645-19734c38-3bd3-11e8-9039-3cd57ca6be15.png\\" alt=\\"FreeBSD installation screenshot 27\\"></p>\\n<p><img src=\\"https://user-images.githubusercontent.com/110297/38501646-19974674-3bd3-11e8-9c2c-43309762fa06.png\\" alt=\\"FreeBSD installation screenshot 28\\"></p>\\n<p><img src=\\"https://user-images.githubusercontent.com/110297/38501647-19ba8fd0-3bd3-11e8-9793-2aad5d2b3f5d.png\\" alt=\\"FreeBSD installation screenshot 29\\"></p>\\n<p><img src=\\"https://user-images.githubusercontent.com/110297/38501649-19e1ad72-3bd3-11e8-90a7-924769ab3bcf.png\\" alt=\\"FreeBSD installation screenshot 30\\"></p>\\n<p><img src=\\"https://user-images.githubusercontent.com/110297/38501650-1a0aa948-3bd3-11e8-8a9d-1a22a23ae30e.png\\" alt=\\"FreeBSD installation screenshot 31\\"></p>\\n<p><img src=\\"https://user-images.githubusercontent.com/110297/38501651-1a2f7f16-3bd3-11e8-995c-6259fac3a19b.png\\" alt=\\"FreeBSD installation screenshot 32\\"></p>\\n<p><img src=\\"https://user-images.githubusercontent.com/110297/38501652-1a6138ee-3bd3-11e8-9e7f-c726d8be9db7.png\\" alt=\\"FreeBSD installation screenshot 33\\"></p>\\n<p><img src=\\"https://user-images.githubusercontent.com/110297/38501653-1a8a7312-3bd3-11e8-85e6-31c56dfbc929.png\\" alt=\\"FreeBSD installation screenshot 34\\"></p>\\n<p><img src=\\"https://user-images.githubusercontent.com/110297/38501654-1ab17c6e-3bd3-11e8-89da-803aa900d9bc.png\\" alt=\\"FreeBSD installation screenshot 35\\"></p>\\n<p><img src=\\"https://user-images.githubusercontent.com/110297/38501655-1ad5fdfa-3bd3-11e8-9490-5577fef134a9.png\\" alt=\\"FreeBSD installation screenshot 36\\"></p>\\n<p><img src=\\"https://user-images.githubusercontent.com/110297/38501656-1afa4c32-3bd3-11e8-9295-f121d1c5177e.png\\" alt=\\"FreeBSD installation screenshot 37\\"></p>\\n<p><img src=\\"https://user-images.githubusercontent.com/110297/38501657-1b2142d8-3bd3-11e8-909a-e23b153333a5.png\\" alt=\\"FreeBSD installation screenshot 38\\"></p>\\n<p><img src=\\"https://user-images.githubusercontent.com/110297/38501658-1b46f294-3bd3-11e8-8b9c-467a2f3ee74e.png\\" alt=\\"FreeBSD installation screenshot 39\\"></p>\\n<p><img src=\\"https://user-images.githubusercontent.com/110297/38501659-1b6a2cfa-3bd3-11e8-9232-132b9fc9f66c.png\\" alt=\\"FreeBSD installation screenshot 40\\"></p>\\n<p><img src=\\"https://user-images.githubusercontent.com/110297/38501660-1b8eb50c-3bd3-11e8-9241-6ba7ac90b490.png\\" alt=\\"FreeBSD installation screenshot 41\\"></p>\\n<p><img src=\\"https://user-images.githubusercontent.com/110297/38501662-1bbfd6dc-3bd3-11e8-9255-ecf42ab69171.png\\" alt=\\"FreeBSD installation screenshot 42\\"></p>\\n<p><img src=\\"https://user-images.githubusercontent.com/110297/38501663-1beb65e0-3bd3-11e8-9560-8048476fa19d.png\\" alt=\\"FreeBSD installation screenshot 43\\"></p>\\n<p><img src=\\"https://user-images.githubusercontent.com/110297/38501664-1c0f3cc2-3bd3-11e8-81f9-5075d2c0d8ac.png\\" alt=\\"FreeBSD installation screenshot 44\\"></p>\\n<p><img src=\\"https://user-images.githubusercontent.com/110297/38501665-1c37d75e-3bd3-11e8-92cd-621ddaa59053.png\\" alt=\\"FreeBSD installation screenshot 45\\"></p>\\n<p>After the system restarts it should boot your newly installed FreeBSD operating\\nsystem.</p>\\n<p>Before you continue working with your system I would strongly suggest to make\\nsure the hostname is set correctly and that it resolves to itself. First,\\ndetermine your hostname using the following command:</p>\\n<pre><code>$ hostname\\nintranet.mydomain.com</code></pre><p>In his example I chose \u201cfreebsdbox\u201d as the hostname and \u201clocaldomain\u2019 as the\\ndomain during the installation. If we were setting up a server to go live at\\nserver1.example.com you would probably want to set the host name to \u201cserver1\u201d\\nand the domain to \u201cexample.com\u201d. To change the hostname open /etc/rc.conf as\\nroot in a text editor and edit the file:</p>\\n<pre><code class=\\"language-sh\\">ee /etc/rc.conf</code></pre>\\n<p>Using the arrow keys, scroll down until you find the line that specifies the\\nhost name of the FreeBSD system. By default, this section says:</p>\\n<pre><code>### Basic network options: ###\\nhostname=&quot;localhost.my.domain&quot; # Set this!</code></pre><p>Change this section to match the hostname you want to use:</p>\\n<pre><code>### Basic network options: ###\\nhostname=&quot;freebsdbox.localdomain&quot;  # Set this!</code></pre><p>Then open your hosts file in the editor:</p>\\n<pre><code class=\\"language-sh\\">ee /etc/hosts</code></pre>\\n<p>Change all the host items to match:</p>\\n<pre><code>::1 localhost.freebsdbox.localdomain localhost\\n127.0.0.1 freebsdbox.localdomain localhost\\n192.1.0.123 freebsdbox.localdomain freebsdbox\\n192.1.0.123 freebsdbox.localdomain.</code></pre>"}]')},20:function(e){e.exports=JSON.parse('[{"title":"GitHub","url":"https://github.com/lupomontero","icon":"<svg aria-labelledby=\\"simpleicons-github-icon\\" role=\\"img\\" viewBox=\\"0 0 24 24\\" xmlns=\\"http://www.w3.org/2000/svg\\"><title id=\\"simpleicons-github-icon\\">GitHub icon</title><path d=\\"M12 .297c-6.63 0-12 5.373-12 12 0 5.303 3.438 9.8 8.205 11.385.6.113.82-.258.82-.577 0-.285-.01-1.04-.015-2.04-3.338.724-4.042-1.61-4.042-1.61C4.422 18.07 3.633 17.7 3.633 17.7c-1.087-.744.084-.729.084-.729 1.205.084 1.838 1.236 1.838 1.236 1.07 1.835 2.809 1.305 3.495.998.108-.776.417-1.305.76-1.605-2.665-.3-5.466-1.332-5.466-5.93 0-1.31.465-2.38 1.235-3.22-.135-.303-.54-1.523.105-3.176 0 0 1.005-.322 3.3 1.23.96-.267 1.98-.399 3-.405 1.02.006 2.04.138 3 .405 2.28-1.552 3.285-1.23 3.285-1.23.645 1.653.24 2.873.12 3.176.765.84 1.23 1.91 1.23 3.22 0 4.61-2.805 5.625-5.475 5.92.42.36.81 1.096.81 2.22 0 1.606-.015 2.896-.015 3.286 0 .315.21.69.825.57C20.565 22.092 24 17.592 24 12.297c0-6.627-5.373-12-12-12\\"/></svg>"},{"title":"Twitter","url":"https://twitter.com/lupomontero","icon":"<svg aria-labelledby=\\"simpleicons-twitter-icon\\" role=\\"img\\" viewBox=\\"0 0 24 24\\" xmlns=\\"http://www.w3.org/2000/svg\\"><title id=\\"simpleicons-twitter-icon\\">Twitter icon</title><path d=\\"M23.954 4.569c-.885.389-1.83.654-2.825.775 1.014-.611 1.794-1.574 2.163-2.723-.951.555-2.005.959-3.127 1.184-.896-.959-2.173-1.559-3.591-1.559-2.717 0-4.92 2.203-4.92 4.917 0 .39.045.765.127 1.124C7.691 8.094 4.066 6.13 1.64 3.161c-.427.722-.666 1.561-.666 2.475 0 1.71.87 3.213 2.188 4.096-.807-.026-1.566-.248-2.228-.616v.061c0 2.385 1.693 4.374 3.946 4.827-.413.111-.849.171-1.296.171-.314 0-.615-.03-.916-.086.631 1.953 2.445 3.377 4.604 3.417-1.68 1.319-3.809 2.105-6.102 2.105-.39 0-.779-.023-1.17-.067 2.189 1.394 4.768 2.209 7.557 2.209 9.054 0 13.999-7.496 13.999-13.986 0-.209 0-.42-.015-.63.961-.689 1.8-1.56 2.46-2.548l-.047-.02z\\"/></svg>"},{"title":"Medium","url":"https://medium.com/@lupomontero","icon":"<svg aria-labelledby=\\"simpleicons-medium-icon\\" role=\\"img\\" viewBox=\\"0 0 24 24\\" xmlns=\\"http://www.w3.org/2000/svg\\"><title id=\\"simpleicons-medium-icon\\">Medium icon</title><path d=\\"M2.846 6.36c.03-.295-.083-.586-.303-.784l-2.24-2.7v-.403H7.26l5.378 11.795 4.728-11.795H24v.403l-1.917 1.837c-.165.126-.247.333-.213.538v13.5c-.034.204.048.41.213.537l1.87 1.837v.403h-9.41v-.403l1.937-1.882c.19-.19.19-.246.19-.538V7.794l-5.39 13.688h-.727L4.278 7.794v9.174c-.052.386.076.774.347 1.053l2.52 3.06v.402H0v-.403l2.52-3.06c.27-.278.39-.67.326-1.052V6.36z\\"/></svg>"},{"title":"YouTube","url":"https://youtube.com/user/lupomontero","icon":"<svg aria-labelledby=\\"simpleicons-youtube-icon\\" role=\\"img\\" xmlns=\\"http://www.w3.org/2000/svg\\" viewBox=\\"0 0 24 24\\"><title id=\\"simpleicons-youtube-icon\\">YouTube icon</title><path class=\\"a\\" d=\\"M23.495 6.205a3.007 3.007 0 0 0-2.088-2.088c-1.87-.501-9.396-.501-9.396-.501s-7.507-.01-9.396.501A3.007 3.007 0 0 0 .527 6.205a31.247 31.247 0 0 0-.522 5.805 31.247 31.247 0 0 0 .522 5.783 3.007 3.007 0 0 0 2.088 2.088c1.868.502 9.396.502 9.396.502s7.506 0 9.396-.502a3.007 3.007 0 0 0 2.088-2.088 31.247 31.247 0 0 0 .5-5.783 31.247 31.247 0 0 0-.5-5.805zM9.609 15.601V8.408l6.264 3.602z\\"/></svg>"},{"title":"Instagram","url":"https://instagram.com/lupomontero","icon":"<svg aria-labelledby=\\"simpleicons-instagram-icon\\" role=\\"img\\" viewBox=\\"0 0 24 24\\" xmlns=\\"http://www.w3.org/2000/svg\\"><title id=\\"simpleicons-instagram-icon\\">Instagram icon</title><path d=\\"M12 0C8.74 0 8.333.015 7.053.072 5.775.132 4.905.333 4.14.63c-.789.306-1.459.717-2.126 1.384S.935 3.35.63 4.14C.333 4.905.131 5.775.072 7.053.012 8.333 0 8.74 0 12s.015 3.667.072 4.947c.06 1.277.261 2.148.558 2.913.306.788.717 1.459 1.384 2.126.667.666 1.336 1.079 2.126 1.384.766.296 1.636.499 2.913.558C8.333 23.988 8.74 24 12 24s3.667-.015 4.947-.072c1.277-.06 2.148-.262 2.913-.558.788-.306 1.459-.718 2.126-1.384.666-.667 1.079-1.335 1.384-2.126.296-.765.499-1.636.558-2.913.06-1.28.072-1.687.072-4.947s-.015-3.667-.072-4.947c-.06-1.277-.262-2.149-.558-2.913-.306-.789-.718-1.459-1.384-2.126C21.319 1.347 20.651.935 19.86.63c-.765-.297-1.636-.499-2.913-.558C15.667.012 15.26 0 12 0zm0 2.16c3.203 0 3.585.016 4.85.071 1.17.055 1.805.249 2.227.415.562.217.96.477 1.382.896.419.42.679.819.896 1.381.164.422.36 1.057.413 2.227.057 1.266.07 1.646.07 4.85s-.015 3.585-.074 4.85c-.061 1.17-.256 1.805-.421 2.227-.224.562-.479.96-.899 1.382-.419.419-.824.679-1.38.896-.42.164-1.065.36-2.235.413-1.274.057-1.649.07-4.859.07-3.211 0-3.586-.015-4.859-.074-1.171-.061-1.816-.256-2.236-.421-.569-.224-.96-.479-1.379-.899-.421-.419-.69-.824-.9-1.38-.165-.42-.359-1.065-.42-2.235-.045-1.26-.061-1.649-.061-4.844 0-3.196.016-3.586.061-4.861.061-1.17.255-1.814.42-2.234.21-.57.479-.96.9-1.381.419-.419.81-.689 1.379-.898.42-.166 1.051-.361 2.221-.421 1.275-.045 1.65-.06 4.859-.06l.045.03zm0 3.678c-3.405 0-6.162 2.76-6.162 6.162 0 3.405 2.76 6.162 6.162 6.162 3.405 0 6.162-2.76 6.162-6.162 0-3.405-2.76-6.162-6.162-6.162zM12 16c-2.21 0-4-1.79-4-4s1.79-4 4-4 4 1.79 4 4-1.79 4-4 4zm7.846-10.405c0 .795-.646 1.44-1.44 1.44-.795 0-1.44-.646-1.44-1.44 0-.794.646-1.439 1.44-1.439.793-.001 1.44.645 1.44 1.439z\\"/></svg>"}]')},21:function(e){e.exports=JSON.parse('[{"title":"Michi","thumb":"https://user-images.githubusercontent.com/110297/37662574-5bbc9e7c-2c25-11e8-803e-9813b4348225.gif","url":"https://lupomontero.github.io/michi/"},{"title":"Sierpinski","thumb":"https://user-images.githubusercontent.com/110297/37666513-bbca2aa2-2c2d-11e8-8f50-a49fdf59f21b.gif","url":"https://lupomontero.github.io/sierpinski/"},{"title":"Cuentagotas","thumb":"https://user-images.githubusercontent.com/110297/37695737-682d9560-2c9f-11e8-8789-86e5f542cee1.gif","url":"https://iiioiioiio.github.io/cuentagotas/"},{"title":"ASCIICAM","thumb":"https://user-images.githubusercontent.com/110297/37695854-65eace5c-2ca0-11e8-8ee5-7e70cb7ca4ba.gif","url":"https://lupomontero.github.io/asciicam/"},{"title":"Infoxicaci\xf3n 1","thumb":"https://user-images.githubusercontent.com/110297/37696020-7a4cc6d8-2ca1-11e8-8185-44a49943ab54.gif","url":"https://infoxication-de2d5.firebaseapp.com/1/"},{"title":"Infoxicaci\xf3n 2","thumb":"https://user-images.githubusercontent.com/110297/38475636-18678494-3b6f-11e8-9a83-8d092af8e1f0.gif","url":"https://infoxication-de2d5.firebaseapp.com/2/"},{"title":"Infoxicaci\xf3n 3","thumb":"https://user-images.githubusercontent.com/110297/38475637-188168e6-3b6f-11e8-9476-2267ce15efa9.gif","url":"https://infoxication-de2d5.firebaseapp.com/3/"},{"title":"Self 3","thumb":"https://user-images.githubusercontent.com/110297/37668822-5c1a86c8-2c33-11e8-8322-96bc40520f09.gif","url":"https://iiioiioiio.github.io/self/3/"},{"title":"Self 2","thumb":"https://user-images.githubusercontent.com/110297/37668823-5c389794-2c33-11e8-9abd-3a29b1a1a700.gif","url":"https://iiioiioiio.github.io/self/2/"},{"title":"Self 1","thumb":"https://user-images.githubusercontent.com/110297/37668549-cbdd1418-2c32-11e8-9f21-7da2cdd10647.gif","url":"https://iiioiioiio.github.io/self/1/"},{"title":"Pinta","thumb":"https://user-images.githubusercontent.com/110297/37695596-7d2b4738-2c9e-11e8-8267-81124aab35e9.gif","url":"https://lupomontero.github.io/pinta/"},{"title":"Summertime?","thumb":"https://user-images.githubusercontent.com/110297/37667173-5da05ab2-2c2f-11e8-9876-1f2405f1eaa6.gif","url":"https://user-images.githubusercontent.com/110297/37667173-5da05ab2-2c2f-11e8-9876-1f2405f1eaa6.gif"}]')},22:function(e,t,n){e.exports=n(36)},27:function(e,t,n){},36:function(e,t,n){"use strict";n.r(t);var o=n(0),a=n.n(o),s=n(16),i=n.n(s),r=(n(27),n(5)),l=n(6),c=function(){var e=Object(l.f)().pathname;return Object(o.useEffect)((function(){window.scrollTo(0,0)}),[e]),null},p=function(e){return a.a.createElement("div",{className:"Social"},e.social.map((function(e){return a.a.createElement("div",{key:e.title},a.a.createElement("a",{href:e.url,title:e.title,target:"_blank",rel:"noopener noreferrer"},a.a.createElement("div",{dangerouslySetInnerHTML:{__html:e.icon}})))})))},d=function(e){return a.a.createElement("header",null,a.a.createElement("h1",null,a.a.createElement(r.b,{to:"/"},"Lupo Montero")),a.a.createElement(p,e))},h=function(e){var t=e.stuff;return a.a.createElement("div",{className:"Stuff"},a.a.createElement("h2",null,"Stuff"),a.a.createElement("div",null,t.map((function(e){return a.a.createElement("a",{key:e.title,style:{backgroundImage:e&&e.thumb?'url("'.concat(e.thumb,'")'):"none"},href:e.url||"#",target:"_blank",rel:"noopener noreferrer"},e.title)}))))},u=n(9),m=function(e){var t=e.post;return a.a.createElement("article",null,a.a.createElement("h3",null,a.a.createElement(r.b,{to:t.id},t.title)),a.a.createElement("span",null,t.publishedAt," | "),a.a.createElement(u.CommentCount,{shortname:"lupomontero",config:{url:t.url,identifier:t.id,title:t.title}},"..."))},g=function(e){var t=e.posts;return a.a.createElement("section",{className:"Blog"},a.a.createElement("h2",null,"Blog Archive"),t.map((function(e){return a.a.createElement(m,{key:e.id,post:e})})))},f=function(e){var t=e.stuff,n=e.posts;return a.a.createElement("div",{className:"Home"},a.a.createElement(h,{stuff:t}),a.a.createElement(g,{posts:n}))},b=function(e){var t=e.posts,n=Object(l.g)().id,o=t.find((function(e){return e.id===n}));return a.a.createElement("div",{className:"Post"},a.a.createElement("h1",null,o.title),a.a.createElement("p",null,o.publishedAt),a.a.createElement("div",{dangerouslySetInnerHTML:{__html:o.body}}),a.a.createElement(u.DiscussionEmbed,{shortname:"lupomontero",config:{url:o.url,identifier:o.id,title:o.title}}))},w=function(e){var t=e.posts,n=e.social,o=e.stuff;return a.a.createElement("div",{className:"App"},a.a.createElement(r.a,null,a.a.createElement(c,null),a.a.createElement(d,{social:n}),a.a.createElement(l.c,null,a.a.createElement(l.a,{exact:!0,path:"/"},a.a.createElement(f,{stuff:o,posts:t})),a.a.createElement(l.a,{path:"/:id"},a.a.createElement(b,{posts:t})))))},y=n(19),v=n(20),k=n(21),I=Boolean("localhost"===window.location.hostname||"[::1]"===window.location.hostname||window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));function q(e,t){navigator.serviceWorker.register(e).then((function(e){e.onupdatefound=function(){var n=e.installing;null!=n&&(n.onstatechange=function(){"installed"===n.state&&(navigator.serviceWorker.controller?(console.log("New content is available and will be used when all tabs for this page are closed. See https://bit.ly/CRA-PWA."),t&&t.onUpdate&&t.onUpdate(e)):(console.log("Content is cached for offline use."),t&&t.onSuccess&&t.onSuccess(e)))})}})).catch((function(e){console.error("Error during service worker registration:",e)}))}i.a.render(a.a.createElement(w,{posts:y,social:v,stuff:k}),document.getElementById("root")),function(e){if("serviceWorker"in navigator){if(new URL("",window.location.href).origin!==window.location.origin)return;window.addEventListener("load",(function(){var t="".concat("","/service-worker.js");I?(!function(e,t){fetch(e).then((function(n){var o=n.headers.get("content-type");404===n.status||null!=o&&-1===o.indexOf("javascript")?navigator.serviceWorker.ready.then((function(e){e.unregister().then((function(){window.location.reload()}))})):q(e,t)})).catch((function(){console.log("No internet connection found. App is running in offline mode.")}))}(t,e),navigator.serviceWorker.ready.then((function(){console.log("This web app is being served cache-first by a service worker. To learn more, visit https://bit.ly/CRA-PWA")}))):q(t,e)}))}}()}},[[22,1,2]]]);
//# sourceMappingURL=main.dbfcb5ee.chunk.js.map