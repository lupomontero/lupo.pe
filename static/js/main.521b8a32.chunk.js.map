{"version":3,"sources":["components/ScrollToTop.js","components/Social.js","components/Header.js","components/Stuff.js","components/Blog.js","components/Home.js","components/Post.js","App.js","serviceWorker.js","index.js"],"names":["ScrollToTop","pathname","useLocation","useEffect","window","scrollTo","Social","props","className","social","map","item","key","title","href","url","target","rel","dangerouslySetInnerHTML","__html","icon","Header","to","Stuff","stuff","style","backgroundImage","thumb","PostSummary","post","id","publishedAt","shortname","config","identifier","Blog","posts","Home","Post","useParams","find","p","body","App","exact","path","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.521b8a32.chunk.js","sourcesContent":["//\n// Ver: https://reacttraining.com/react-router/web/guides/scroll-restoration\n//\n\nimport { useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\n\nconst ScrollToTop = () => {\n  const { pathname } = useLocation();\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [pathname]);\n\n  return null;\n};\n\nexport default ScrollToTop;\n","import React from 'react';\n\nconst Social = props => (\n  <div className=\"Social\">\n    {props.social.map(item => (\n      <div key={item.title}>\n        <a\n          href={item.url}\n          title={item.title}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          <div dangerouslySetInnerHTML={{__html: item.icon}} />\n        </a>\n      </div>\n    ))}\n  </div>\n);\n\nexport default Social;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport Social from './Social';\n\nconst Header = props => (\n  <header>\n    <h1><Link to=\"/\">Lupo Montero</Link></h1>\n    <Social {...props} />\n  </header>\n);\n\nexport default Header;\n","import React from 'react';\n\nconst Stuff = ({ stuff }) => (\n  <div className=\"Stuff\">\n    <h2>Stuff</h2>\n    <div>\n      {stuff.map(item => (\n        <a\n          key={item.title}\n          style={{\n            backgroundImage: item && item.thumb ? `url(\"${item.thumb}\")` : 'none',\n          }}\n          href={item.url || '#'}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          {item.title}\n        </a>\n      ))}\n    </div>\n  </div>\n);\n\nexport default Stuff;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { CommentCount } from 'disqus-react';\n\nconst PostSummary = ({ post }) => (\n  <article>\n    <h3>\n      <Link to={post.id}>\n        {post.title}\n      </Link>\n    </h3>\n    <span>{post.publishedAt} | </span>\n    <CommentCount shortname={'lupomontero'} config={{\n      url: post.url,\n      identifier: post.id,\n      title: post.title,\n    }}>\n      ...\n    </CommentCount>\n  </article>\n);\n\nconst Blog = ({ posts }) => (\n  <section className=\"Blog\">\n    <h2>Blog Archive</h2>\n    {posts.map(post => (\n      <PostSummary key={post.id} post={post} />\n    ))}\n  </section>\n);\n\nexport default Blog;\n","import React from 'react';\nimport Stuff from './Stuff';\nimport Blog from './Blog';\n\nconst Home = ({ stuff, posts }) => (\n  <div className=\"Home\">\n    <Stuff stuff={stuff} />\n    <Blog posts={posts} />\n  </div>\n);\n\nexport default Home;\n","import React from 'react';\nimport { useParams } from 'react-router-dom';\nimport { DiscussionEmbed } from 'disqus-react';\n\nconst Post = ({ posts }) => {\n  const { id } = useParams();\n  const post = posts.find(p => p.id === id);\n  return (\n    <div className=\"Post\">\n      <h1>{post.title}</h1>\n      <p>{post.publishedAt}</p>\n      <div dangerouslySetInnerHTML={{ __html: post.body }} />\n      <DiscussionEmbed shortname={'lupomontero'} config={{\n        url: post.url,\n        identifier: post.id,\n        title: post.title,\n      }} />\n    </div>\n  );\n};\n\nexport default Post;\n","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport ScrollToTop from './components/ScrollToTop';\nimport Header from './components/Header';\nimport Home from './components/Home';\nimport Post from './components/Post';\n\nconst App = ({ posts, social, stuff }) => (\n  <div className=\"App\">\n    <Router>\n      <ScrollToTop />\n      <Header social={social} />\n      <Switch>\n        <Route exact path=\"/\">\n          <Home stuff={stuff} posts={posts} />\n        </Route>\n        <Route path=\"/:id\">\n          <Post posts={posts} />\n        </Route>\n      </Switch>\n    </Router>\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport posts from './data/posts.json';\nimport social from './data/social.json';\nimport stuff from './data/stuff.json';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App\n    posts={posts}\n    social={social}\n    stuff={stuff}\n  />,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}